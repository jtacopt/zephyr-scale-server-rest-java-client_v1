{
  "openapi": "3.0.3",
  "info": {
    "title": "Zephyr Scale Server API (v1)",
    "version": "1.0",
    "description": "## DISCLAIMER\n\nWe strongly discourage and do not endorse using private APIs for any purpose. Important points to remember:\n\n1. **Non-Endorsement**: We do not support or endorse private API usage.\n\n2. **API Changes**: Private APIs may change without notice; use them at your own risk.\n\n3. **Data Responsibility**: We are not responsible for issues arising from private API use, such ***as data corruption***.\n\nPlease follow our terms of service and official ***public*** APIs for a stable and secure application experience. Unauthorized private API use may lead to instability and ***data corruption***.\n\n## Accessing the API\nThe Zephyr Scale REST API is ready to use if you have Zephyr Scale installed on your JIRA instance.\nAll API uses the following base URL:\n```\nhttp://your-jira-host:port/your-jira-context/rest/atm/1.0/\n```\nFor instance, you can create test results using the \"testresult\" api:\n```\nPOST http://localhost:2990/jira/rest/atm/1.0/testresult\n```\n\n## Authentication Basics\nAny authentication that works with JIRA will work with the Zephyr Scale REST API.\nThe prefered authentication methods are OAuth and HTTP Basic. See the [JIRA SERVER REST API](https://developer.atlassian.com/server/jira/platform/rest-apis) docs for details.\n## Using Status and Environment Fields\nSome entities, such as the Test Results, may have status and environment fields. The values of these fields are identified by name, not by the localized name.\nBoth fields may have custom values defined by the user on the Zephyr Scale configuration area. All values are **case sensitive**, and they must be set just as displayed on the add-on.\n\nThese are the default values, which must be used on the APIs instead of their localized versions:\n* Test Cases:\n  * Draft\n  * Approved\n  * Deprecated\n\n* Test Runs:\n  * Not Executed\n  * In Progress\n  * Done\n\n* Test Results:\n  * Not Executed\n  * In Progress\n  * Pass\n  * Fail\n  * Blocked\n## Handling Date Format\nThe API supports the ISO 8601 format for date/time fields. This allows you to pass in the level of detail you need to. When a field is not specified, the earliest possible value is the default. For example, if you do not specify a time of day, we will default to 00:00 (midnight). Similarly, not specifying a timezone defaults the timezone to GMT. The full representation is of the format:\n```\nyyyy-MM-ddTHH:mm:ss.SSSZ\n```\nThis table illustrates some example valid dates and times:\n\n| Input | Equivalent to |\n| ------ | ----------- |\n| 2016 | 2016-01-01T00:00:00.000Z |\n| 2016-04 | 2016-04-01T00:00:00.000Z |\n| 2016-04-15 | 2016-04-15T00:00:00.000Z |\n| 2016-04-15T16 | 2016-04-15T16:00:00.000Z |\n| 2016-04-15T16:15 | 2016-04-15T16:15:00.000Z |\n| 2016-04-15T16:15Z | 2016-04-15T16:15:00.000Z (GMT time zone) |\n| 2016-04-15T16:15-0300 | 2016-04-15T16:15:00.000-0300 (Brazil time zone) |\n"
  },
  "servers": [
    {
      "url": "https://{host}{basePath}",
      "variables": {
        "host": {
          "default": "team.atlassian.com"
        },
        "basePath": {
          "default": "/rest/atm/1.0"
        }
      }
    }
  ],
  "paths": {
    "/testcase": {
      "post": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "201": {
            "description": "The Test Case was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_response_key.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Case.\n\nWhitespace is not allowed for labels, and it will be replaced by an underscore character.\nThe field ```type``` of Test Script can have the values ```PLAIN_TEXT```, ```STEP_BY_STEP``` or ```BDD```. The field ```text``` describes the content of the plain text or BDD test script; otherwise, the steps can be described as objects using the field ```steps```.\nCall To Tests can be added to the steps list by using the field ```testCaseKey``` with a Test Case key as value.\nThe optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.\nThe fields ```status``` and ```priority``` will be set to default values if not defined.\nThe optional field parameters has two attributes: variables and entries. For attribute variables, two types are allowed: FREE_TEXT and DATA_SET. If using DATA_SET, an extra field should be informed, having the name of the dataset. If the dataset doesn’t exist, it will be automatically created. Attribute entries must only have values matching the informed variables. If a value of a dataset doesn’t exist, it will be automatically created for that dataset. Check the examples below for more details.\n",
        "operationId": "createTestCase",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testcase_post.example",
              "schema": {
                "$ref": "schema/testCase.json"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testcase/{testCaseKey}": {
      "get": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The Test Case was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_get.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key."
          }
        },
        "description": "Retrieve the Test Case matching the given key.\n",
        "operationId": "getTestCaseByTestCaseKey",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Case to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The Test Case was successfully updated."
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Updates a Test Case.\n\nWhitespace is not allowed for labels, and it will be replaced by an underscore character.\nThe field ```type``` of Test Script can have the values ```PLAIN_TEXT```, ```STEP_BY_STEP``` or ```BDD```. The field ```text``` describes the content of the plain text or BDD test script; otherwise, the steps can be described as objects using the field ```steps```.\nThe field ```folder```, if defined, must contain an existent folder name. No folder will be created.\nOnly fields present on the body will be updated. The field ```projectKey``` cannot be changed.\nCall To Tests can be added to the steps list by using the field ```testCaseKey``` with a Test Case key as value.\nThe optional field parameters has two attributes: variables and entries. For attribute variables, two types are allowed: FREE_TEXT and DATA_SET. If using DATA_SET, an extra field should be informed, having the name of the dataset. If the dataset doesn’t exist, it will be automatically created. Attribute entries must only have values matching the informed variables. If a value of a dataset doesn’t exist, it will be automatically created for that dataset. Check the examples below for more details.\nFor the field ```testScript```, when it is a step-by-step script:\n* If some step is missing in comparison to the target Test Case, it will be deleted.\n* Steps not having ```id``` will be considered as a new step and will be created.\n* Steps having ```id``` will be considered as existing steps and will be updated.\n",
        "operationId": "updateTestCaseByTestCaseKey",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testcase_put.example",
              "schema": {
                "$ref": "schema/testCase.json"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "204": {
            "description": "The Test Case was successfully deleted."
          },
          "404": {
            "description": "No Test Case has been found with the given key."
          }
        },
        "description": "Delete the Test Case matching the given key.\n",
        "operationId": "deleteTestCaseByTestCaseKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testCaseKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Case."
        }
      ]
    },
    "/testcase/{testCaseKey}/attachments": {
      "post": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key."
          }
        },
        "description": "Create a new attachment on the specified Test Case.",
        "operationId": "createTestCaseAttachments",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The Test Case Attachments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key."
          }
        },
        "description": "Retrieve the Test Case Attachments matching the given key.\n",
        "operationId": "getTestCaseAttachments",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testCaseKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Case."
        }
      ]
    },
    "/testcase/{testCaseKey}/testresult/latest": {
      "get": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The Last Test Result was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/testResult.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key or the Test Case has no results."
          }
        },
        "description": "Retrieve the last test result for a given key",
        "operationId": "getLastTestResultByTestCaseKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testCaseKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Case."
        }
      ]
    },
    "/testcase/{testCaseKey}/step/{stepIndex}/attachments": {
      "get": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The test case step attachment was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key or the Step Index was not found."
          }
        },
        "description": "Retrieve the attachments for a test case step",
        "operationId": "getAttachmentsFromStepByTestCaseKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key or the Step Index was not found."
          }
        },
        "description": "Create a new attachment on the specified Step of a Test Case.",
        "operationId": "createTestCaseStepAttachmentsByTestCaseKeyAndStepIndex",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "stepIndex",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "description": "The index of the Test Case step."
        },
        {
          "name": "testCaseKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Case."
        }
      ]
    },
    "/testcase/search": {
      "get": {
        "tags": [
          "Test Cases"
        ],
        "responses": {
          "200": {
            "description": "The Test Cases were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcases_get.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_search_response_error.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Retrieve the Test Cases that matches the query passed as parameter.\n",
        "operationId": "findTestCase",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Case to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A query to filter Test Cases. The query syntax is similar to the JIRA JQL.\n\n* Available fields: ```projectKey```, ```key```, ```name```, ```status```, ```priority```, ```component```, ```folder```, ```estimatedTime```, ```labels```, ```owner``` and custom fields. When filtering by custom fields, the field name must be quoted.\n* Available operators: ```=```, ```>```, ```>=```, ```<```, ```<=```, ```IN```\n* For Single and Multi Choice custom fields, operator \"=\" is not supported, use \"IN\" instead\n* Available logical operators: ```AND```\n\nIt is always a good idea considering using the ```projectKey``` field to match values that only belongs to that project, such as statuses, folders, etc.\n\nFolders always have to start with a \"/\", for instance: \"/a folder\". The \"/\" matches the root, above all folders.\n\nThe query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.\n\nUsage examples:\n* projectKey = \"JQA\" AND status = \"Draft\" AND priority = \"High\"\n* projectKey = \"JQA\" AND status IN (\"Draft\", \"Deprecated\") AND labels IN (\"Functional\", \"UI\")\n* projectKey = \"JQA\" AND status IN (\"Draft\", \"Deprecated\") AND labels IN (\"Functional\", \"UI\")\n* projectKey = \"JQA\" AND status = \"Draft\" AND folder = \"/\"\n* projectKey = \"JQA\" AND folder = \"/folder with some test cases\"\n* projectKey = \"JQA\" AND folder = \"/folder with some test cases/child folder\"\n* projectKey = \"JQA\" AND folder IN (\"/parent folder\", \"/parent folder/child folder\")\n* projectKey = \"JQA\" AND \"My Custom Field\" = \"Some value\"\n* projectKey = \"JQA\" AND \"Single Choice Custom Field\" IN (\"Some value\")\n* projectKey = \"JQA\" AND \"Multi Choice Custom Field\" IN (\"Some value\", \"Another value\")\n* projectKey = \"JQA\" AND issueKeys IN (\"JQA-5\", \"JQA-4\")\n* key IN (\"JQA-T50\", \"JTQ-T90\")\n* key IN (\"JQA-T50\", \"JTQ-T90\") AND name = \"My Test Case Name\"\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "An offset to use with the query. This can be useful when paginating results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The max result count, limiting the query results. If not provided, the default value of 200 will be used.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testplan": {
      "post": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "201": {
            "description": "The Test Plan was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testplan_response_key.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testplan_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Plan.\n\nWhitespace is not allowed for labels, and it will be replaced by an underscore character.\nThe optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.\nThe field ```status``` will be set to a default value if not defined.\n",
        "operationId": "createTestPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testplan_post.example",
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testplan/{testPlanKey}": {
      "put": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "200": {
            "description": "The Test Plan was successfully updated."
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testplan_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Updates a Test Plan.\n\nWhitespace is not allowed for labels, and it will be replaced by an underscore character.\nThe optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.\nThe field ```status``` will be set to a default value if not defined.\n",
        "operationId": "updateTestPlanByTestPlanKey",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testplan_post.example",
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "200": {
            "description": "The Test Plan was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testplan_get.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Plan has been found with the given key."
          }
        },
        "description": "Retrieve the Test Plan matching the given key.\n",
        "operationId": "getTestPlanByTestPlanKey",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Plan to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "204": {
            "description": "The Test Plan was successfully deleted."
          },
          "404": {
            "description": "No Test Plan has been found with the given key."
          }
        },
        "description": "Delete the Test Plan matching the given key.",
        "operationId": "deleteTestPlanByTestPlanKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testPlanKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Plan."
        }
      ]
    },
    "/testplan/{testPlanKey}/attachments": {
      "post": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Plan has been found with the given key."
          }
        },
        "description": "Create a new attachment on the specified Test Plan.",
        "operationId": "createTestPlanAttachmentsByTestPlanKey",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "200": {
            "description": "The Test Plan Attachments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Plan has been found with the given key."
          }
        },
        "description": "Retrieve the Test Plan Attachments matching the given key.\n",
        "operationId": "getTestPlanAttachmentsByTestPlanKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testPlanKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Plan."
        }
      ]
    },
    "/testplan/search": {
      "get": {
        "tags": [
          "Test Plan"
        ],
        "responses": {
          "200": {
            "description": "The Test Plans were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testplans_get.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcase_search_response_error.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Retrieve the Test Plans that matches the query passed as parameter.\n",
        "operationId": "findTestPlan",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Plan to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A query to filter Test Plans. The query syntax is similar to the JIRA JQL.\n\n* Available fields: ```projectKey```, ```key```, ```name```, ```status```, ```folder```, ```labels```, ```owner```, ```issueKeys``` and custom fields. When filtering by custom fields, the field name must be quoted.\n* Available operators: ```=```, ```>```, ```>=```, ```<```, ```<=```, ```IN```\n* For Single and Multi Choice custom fields, operator \"=\" is not supported, use \"IN\" instead\n* Available logical operators: ```AND```\n\nIt is always a good idea considering using the ```projectKey``` field to match values that only belongs to that project, such as statuses, folders, etc.\n\nFolders always have to start with a \"/\", for instance: \"/a folder\". The \"/\" matches the root, above all folders.\n\nThe query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.\n\nUsage examples:\n* projectKey = \"JQA\" AND status = \"Draft\"\n* projectKey = \"JQA\" AND status IN (\"Draft\", \"Deprecated\") AND labels IN (\"Functional\", \"UI\")\n* projectKey = \"JQA\" AND status = \"Draft\" AND folder = \"/\"\n* projectKey = \"JQA\" AND folder = \"/folder with some test plans\"\n* projectKey = \"JQA\" AND folder = \"/folder with some test plans/child folder\"\n* projectKey = \"JQA\" AND folder IN (\"/parent folder\", \"/parent folder/child folder\")\n* projectKey = \"JQA\" AND \"My Custom Field\" = \"Some value\"\n* projectKey = \"JQA\" AND \"Single Choice Custom Field\" IN (\"Some value\")\n* projectKey = \"JQA\" AND \"Multi Choice Custom Field\" IN (\"Some value\", \"Another value\")\n* projectKey = \"JQA\" AND issueKeys IN (\"JQA-5\", \"JQA-4\")\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "An offset to use with the query. This can be useful when paginating results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The max result count, limiting the query results. If not provided, the default value of 200 will be used.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testrun": {
      "post": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "201": {
            "description": "The Test Run was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testrun_response_key.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testrun_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Run.\n\nThe fields ```plannedStartDate``` and ```plannedEndDate``` will be set to default values if not defined.\nThe field ```status``` will be automatically inferred based on the status of Test Run Items (field ```items```).\nThe Test Run can be linked to a Test Plan, by setting a valid value on field testPlanKey. Also, it can be linked to an issue, by setting a valid value on field issueKey.\nAll Test Result fields are allowed for Test Run Items (field ```items```).\n",
        "operationId": "createTestRun",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testrun_post.example",
              "schema": {
                "$ref": "#/components/schemas/testrun"
              }
            }
          },
          "required": false
        }
      }
    },
    "/testrun/{testRunKey}": {
      "get": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "200": {
            "description": "The Test Run was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testrun_get.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Run has been found with the given key."
          }
        },
        "description": "Retrieve the Test Run matching the given key.\n",
        "operationId": "getTestRunByTestRunKey",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "204": {
            "description": "The Test Run was successfully deleted."
          },
          "404": {
            "description": "No Test Run has been found with the given key."
          }
        },
        "description": "Delete the Test Run matching the given key.\n",
        "operationId": "deleteTestRunByTestRunKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testRunKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Run."
        }
      ]
    },
    "/testrun/{testRunKey}/attachments": {
      "post": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Run has been found with the given key."
          }
        },
        "description": "Create a new attachment on the specified Test Run.",
        "operationId": "createAttachmentsByTestRunKey",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "200": {
            "description": "The Test Run Attachments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Run has been found with the given key."
          }
        },
        "description": "Retrieve the Test Run Attachments matching the given key.\n",
        "operationId": "getTestRunAttachmentsByTestRunKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testRunKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Run."
        }
      ]
    },
    "/testrun/{testRunKey}/testcase/{testCaseKey}/testresult": {
      "post": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "201": {
            "description": "The Test Result was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_id.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Result on the specified Test Run, looking for an item that matches the ```testCaseKey``` and the query string filter parameters.\nIf more than one item is found using the specified parameters, only the first one of them will have the new Test Result created.\nOnce created, the new Test Result can be seen inside the specified Test Run, looking for a Test Case that matches the request parameters.\nThe fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.\n\nDeprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:\n\n```executionDate``` is now represented by ```actualEndDate```\n\n```userKey``` is now represented by ```executedBy```\n",
        "operationId": "createTestResultByTestRunKeyAndTestCaseKey",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve embeddedtestresult_post.example",
              "schema": {
                "$ref": "#/components/schemas/embeddedtestresult"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "environment",
            "in": "query",
            "required": true,
            "description": "The environment to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "required": true,
            "description": "The user key to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "200": {
            "description": "The last Test Result was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_id.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Updates the last Test Result on the specified Test Run, looking for an item that matches the testCaseKey and the query string filter parameters. Only defined fields will be updated.\nIf more than one item is found using the specified parameters, only the first one of them will have the Test Result updated.\nThe updated data can be seen inside the specified Test Run, looking for the last Test Results of the Test Case that matches the request parameters.\n",
        "operationId": "updateTestResultByTestRunKeyAndTestCaseKey",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve embeddedtestresult_post.example",
              "schema": {
                "$ref": "#/components/schemas/embeddedtestresult"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "environment",
            "in": "query",
            "required": true,
            "description": "The environment to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "required": true,
            "description": "The user key to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testCaseKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Case"
        },
        {
          "name": "testRunKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Run."
        }
      ]
    },
    "/testrun/{testRunKey}/testresults": {
      "post": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "201": {
            "description": "The Test Results were successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_ids.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Create new Test Results on the specified Test Run, looking for items that match the ```testCaseKey``` for each body item.\nOnce created, the new Test Results can be seen inside the specified Test Run, looking for Test Cases that match the request parameters.\nThe fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.\n\nDeprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:\n\n```executionDate``` is now represented by ```actualEndDate```\n\n```userKey``` is now represented by ```executedBy```\n",
        "operationId": "createTestResultsByTestRunKey",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve embeddedtestresults_post.example",
              "schema": {
                "$ref": "#/components/schemas/embeddedtestresult"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "environment",
            "in": "query",
            "required": true,
            "description": "The environment to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "required": true,
            "description": "The user key to be optionally matched by an item on the Test Run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "200": {
            "description": "The Test Result list was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/testResult.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Run has been found with the given key."
          }
        },
        "description": "Retrieve All Test Results linked to a Test Run.\n",
        "operationId": "getTestResultsByTestRunKey",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testRunKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Test Run."
        }
      ]
    },
    "/testrun/search": {
      "get": {
        "tags": [
          "Test Run"
        ],
        "responses": {
          "200": {
            "description": "The Test Runs were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testruns_get.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testrun_search_response_error.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Retrieve the Test Runs that matches the query passed as parameter.\n",
        "operationId": "findTestRun",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A query to filter Test Runs. The query syntax is similar to the JIRA JQL.\n\n* Available fields: ```projectKey```, ```folder```\n* Available operators: ```=```, ```IN```\n* Available logical operators: ```AND```\n\nThe query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.\n\nUsage example:\n* projectKey = \"JQA\"\n* projectKey IN (\"JQA\", \"DEF\")\n* projectKey = \"JQA\" AND folder = \"/Orbiter\"\n* projectKey IN (\"JQA\", \"DEF\") AND folder = \"/Orbiter/Propellant\"\n* folder = \"/Orbiter\"\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "An offset to use with the query. This can be useful when paginating results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The max result count, limiting the query results. If not provided, the default value of 200 will be used.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testresult": {
      "post": {
        "tags": [
          "Test Result"
        ],
        "responses": {
          "201": {
            "description": "The Test Result was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_id.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testresult_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Result for a Test Case.\n\nOnce created, a new Test Result can be seen on the \"Execution\" tab of the specified Test Case. This Test Result is not linked with any Test Run.\nThe fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.\n\nDeprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:\n\n```executionDate``` is now represented by ```actualEndDate```\n\n```userKey``` is now represented by ```executedBy```\n",
        "operationId": "createTestResult",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve testresult_post.example",
              "schema": {
                "$ref": "schema/testResult.json"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/testresult/{testResultId}/attachments": {
      "post": {
        "tags": [
          "Test Result"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Result has been found with the given id."
          }
        },
        "description": "Create a new attachment on the specified Test Result.",
        "operationId": "createAttachmentsByTestResultId",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Result"
        ],
        "responses": {
          "200": {
            "description": "The Test Result Attachments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Case has been found with the given key."
          }
        },
        "description": "Retrieve the Test Result Attachments matching the given id.",
        "operationId": "getAttachmentsByTestResultId",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testResultId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "description": "The id of the Test Result."
        }
      ]
    },
    "/testresult/{testResultId}/step/{stepIndex}/attachments": {
      "post": {
        "tags": [
          "Test Result"
        ],
        "responses": {
          "201": {
            "description": "The attachment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_id.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Result step has been found with the given id and index value."
          }
        },
        "description": "Create a new attachment on the specified step of the Test Result.",
        "operationId": "createAttachmentsByTestResultIdAndStepIndex",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The file to be uploaded, using ```multipart/form-data``` content type.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "tags": [
          "Test Result"
        ],
        "responses": {
          "200": {
            "description": "The Test Result Step Attachments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "schema/attachments.json"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Test Result Step has been found with the given testResultId and stepIndex."
          }
        },
        "description": "Retrieve the Test Result Step Attachments matching the given testResultId and stepIndex.\n",
        "operationId": "get_testresult-testResultId-step-stepIndex-attachments",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "testResultId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "description": "The id of the Test Result."
        },
        {
          "name": "stepIndex",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "description": "The index of the Test Result step."
        }
      ]
    },
    "/issuelink/{issueKey}/testcases": {
      "get": {
        "tags": [
          "Issue Link"
        ],
        "responses": {
          "200": {
            "description": "The Test Cases were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve testcases_get.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          },
          "404": {
            "description": "No Issue has been found with the given key."
          }
        },
        "description": "Retrieve all Test Cases linked to an Issue.\n",
        "operationId": "getIssueLinkByIssueKey",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the Test Case to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "issueKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the linked Issue."
        }
      ]
    },
    "/folder": {
      "post": {
        "tags": [
          "Folder"
        ],
        "responses": {
          "201": {
            "description": "The Folder was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve folder_response_id.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve folder_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new folder for test cases, test plans or test runs.\n\nIn order to create a new folder you must POST a json with 3 fields: projectKey, name and type. The field type can\nbe filled with TEST_CASE, TEST_PLAN or TEST_RUN.\n",
        "operationId": "createFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve folder_post.example",
              "schema": {
                "$ref": "#/components/schemas/folder"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/folder/{folderId}": {
      "put": {
        "tags": [
          "Folder"
        ],
        "responses": {
          "200": {
            "description": "The Folder was successfully updated."
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve folder_update_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Updates a folder for test cases, test plans or test runs.\n\nYou can only update the name or the custom field value of a folder, in order to do that you must PUT a json with 2 fields: name and customFields.\nThe field name is a String and forward and backslashes are not allowed.\nThe field customFields is an object with the key being the custom field name.\n",
        "operationId": "updateFolderByFolderId",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve folder_put.example",
              "schema": {
                "$ref": "#/components/schemas/folder"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "folderId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "description": "The id of the Folder."
        }
      ]
    },
    "/attachments/{id}": {
      "delete": {
        "tags": [
          "Attachments"
        ],
        "responses": {
          "204": {
            "description": "The Attachment was successfully deleted."
          },
          "400": {
            "description": "The Attachment can't be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve attachment_response_cant_delete.example"
                }
              }
            }
          },
          "404": {
            "description": "No Attachment has been found with the given id."
          }
        },
        "description": "Delete an Attachment given an id",
        "operationId": "deleteAttachmentsById",
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "responses": {
          "200": {
            "description": "The Environments were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve environments_get.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve environments_get_response_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Retrieve the Environments matching the given projectKey.\n\nThe project must exist\nThe project must have Zephyr Scale enabled\n",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "required": true,
            "description": "The key of the Project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "responses": {
          "201": {
            "description": "The Environment was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve environments_response_id.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve environments_response_post_fielderror.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Environment.\n\nThe project must exist\nThe project must have Zephyr Scale enabled\nThe name must be unique\n",
        "operationId": "createEnvironments",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve environments_post.example",
              "schema": {
                "$ref": "#/components/schemas/environment"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/automation/execution/{projectKey}": {
      "post": {
        "tags": [
          "Automation"
        ],
        "responses": {
          "201": {
            "description": "The Test Run was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve automation_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve automation_custom_file_response_post_error.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Cycle based on provided automated test results.\nThis endpoint receives a zip file containing one or more Zephyr Scale Test Results File Format to create the Test Cycle. See [Zephyr Scale JUnit Integration](https://bitbucket.org/smartbeartm4j/tm4j-junit-integration) to learn how to generate this file.\nOptionally, you can send a `testCycle` part in your form data to customize the created Test Cycle.\n",
        "operationId": "createAutomationTestCycleByProjectKey",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "Can not resolve automation_testcycle_formparam.example",
              "schema": {
                "description": "A JSON object to customize the new Test Cycle.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Project."
        }
      ]
    },
    "/automation/execution/cucumber/{projectKey}": {
      "post": {
        "tags": [
          "Automation"
        ],
        "responses": {
          "201": {
            "description": "The Test Run was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve automation_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve automation_custom_file_response_post_error.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new Test Cycle based on provided automated test results.\nThis endpoint receives a zip file containing one or more [Cucumber Json Output file](https://relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter).\nOptionally, you can send a `testCycle` part in your form data to customize the created Test Cycle.\n",
        "operationId": "createAutomationExecutionCucumberByProjectKey",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "Can not resolve automation_testcycle_formparam.example",
              "schema": {
                "description": "A JSON object to customize the new Test Cycle.",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The key of the Project."
        }
      ]
    },
    "/automation/testcases": {
      "get": {
        "tags": [
          "Automation"
        ],
        "responses": {
          "200": {
            "description": "The Cucumber Feature Files were successfully retrieved."
          },
          "204": {
            "description": "No Test Cases found for the query."
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Retrieve a zip file containing Cucumber Feature Files that matches the tql passed as parameter.\n",
        "operationId": "getCucumberFeatureFiles",
        "parameters": [
          {
            "name": "tql",
            "in": "query",
            "required": true,
            "description": "A Zephyr Scale TQL to filter Test Cases. The param syntax is similar to the JIRA JQL.\n\n* Available fields: ```projectKey```.\n* Available operators: ```=```, ```IN```\n\nUsage examples:\n* testCase.projectKey = 'JQA'\n* testCase.projectKey IN ('JQA', 'JQB')\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "responses": {
          "201": {
            "description": "The Zephyr Scale Project was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve project_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve project_response_invalidproject.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Create a Zephyr Scale project for an existing Jira project. If the Zephyr Scale project exists, enable/disable it\n",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve project_post.example",
              "schema": {
                "$ref": "#/components/schemas/project"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customfield": {
      "post": {
        "tags": [
          "Custom Field"
        ],
        "responses": {
          "201": {
            "description": "The custom field was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve customfield_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve customfield_response_duplicatedname.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new custom field for test cases, test plans, test runs, test result or folder.\nThe custom fied name must be unique by project and category.\n\nCustom fields must have one of these categories:\n`TEST_PLAN`, `TEST_RUN`, `TEST_STEP`, `TEST_EXECUTION`, `TEST_CASE` or `FOLDER`.\n\nCustom fields must have of these types: `SINGLE_LINE_TEXT`, `MULTI_LINE_TEXT`, `NUMBER`, `DATE`, `SINGLE_CHOICE_SELECT_LIST`,\n`CHECKBOX`, `DECIMAL`, `MULTI_CHOICE_SELECT_LIST` or `USER_LIST`.\n",
        "operationId": "createCustomField",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve customfield_post.example",
              "schema": {
                "$ref": "#/components/schemas/customfield"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customfield/{customFieldId}/option": {
      "post": {
        "tags": [
          "Custom Field"
        ],
        "responses": {
          "201": {
            "description": "The custom field option was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve customfieldoption_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve customfieldoption_response_notsupported.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Creates a new custom field option for `SINGLE_CHOICE_SELECT_LIST` or `MULTI_CHOICE_SELECT_LIST` custom field.\n",
        "operationId": "createCustomFieldOptionByCustomFieldId",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve customfieldoption_post.example",
              "schema": {
                "$ref": "#/components/schemas/customfieldoption"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": [
        {
          "name": "customFieldId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/delete/executiondeletion": {
      "post": {
        "tags": [
          "Delete Execution"
        ],
        "responses": {
          "200": {
            "description": "The deletion process has started.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve executiondeletion_post_response.example"
                }
              }
            }
          },
          "400": {
            "description": "Some parameters are invalid (For example&#58; You cannot delete executions created in the last 3 months)",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve executiondeletion_response_invalid_date.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Starts the deletion process of Test Executions (also known as Test Results). This process only removes executions older than 3 months and it will keep the last test executions.\n`projectKey` is the key of the project to delete executions from. If it is not provided, executions from all projects will be deleted.\nOnly Jira Admin users can execute this process.\n",
        "operationId": "deleteTestResults",
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Can not resolve executiondeletion.example",
              "schema": {
                "$ref": "#/components/schemas/executiondeletion"
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/delete/executiondeletion/status": {
      "get": {
        "tags": [
          "Delete Execution"
        ],
        "responses": {
          "200": {
            "description": "The Status of the deletion process was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve executiondeletion_status_get_response.example"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Can not resolve response_autherror.example"
                }
              }
            }
          }
        },
        "description": "Gets the status of the test execution deletion process. The statuses can be: IN_PROGRESS, FINISHED or FAILED.\n",
        "operationId": "getDeleteExecutionStatus",
        "security": [
          {
            "basic": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "embeddedtestresult": {
        "type": "string"
      },
      "testrun": {
        "type": "string"
      },
      "folder": {
        "type": "string"
      },
      "environment": {
        "type": "string"
      },
      "project": {
        "type": "string"
      },
      "customfield": {
        "type": "string"
      },
      "customfieldoption": {
        "type": "string"
      },
      "executiondeletion": {
        "type": "string"
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "basic": {
        "description": "See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.\n",
        "type": "http",
        "scheme": "basic"
      }
    },
    "links": {},
    "callbacks": {}
  }
}