openapi: 3.0.3
info:
  description: |
    ## DISCLAIMER

    We strongly discourage and do not endorse using private APIs for any purpose. Important points to remember:

    1. **Non-Endorsement**: We do not support or endorse private API usage.

    2. **API Changes**: Private APIs may change without notice; use them at your own risk.

    3. **Data Responsibility**: We are not responsible for issues arising from private API use, such ***as data corruption***.

    Please follow our terms of service and official ***public*** APIs for a stable and secure application experience. Unauthorized private API use may lead to instability and ***data corruption***.

    ## Accessing the API
    The Zephyr Scale REST API is ready to use if you have Zephyr Scale installed on your JIRA instance.
    All API uses the following base URL:
    ```
    http://your-jira-host:port/your-jira-context/rest/atm/1.0/
    ```
    For instance, you can create test results using the "testresult" api:
    ```
    POST http://localhost:2990/jira/rest/atm/1.0/testresult
    ```

    ## Authentication Basics
    Any authentication that works with JIRA will work with the Zephyr Scale REST API.
    The prefered authentication methods are OAuth and HTTP Basic. See the [JIRA SERVER REST API](https://developer.atlassian.com/server/jira/platform/rest-apis) docs for details.
    ## Using Status and Environment Fields
    Some entities, such as the Test Results, may have status and environment fields. The values of these fields are identified by name, not by the localized name.
    Both fields may have custom values defined by the user on the Zephyr Scale configuration area. All values are **case sensitive**, and they must be set just as displayed on the add-on.

    These are the default values, which must be used on the APIs instead of their localized versions:
    * Test Cases:
      * Draft
      * Approved
      * Deprecated

    * Test Runs:
      * Not Executed
      * In Progress
      * Done

    * Test Results:
      * Not Executed
      * In Progress
      * Pass
      * Fail
      * Blocked
    ## Handling Date Format
    The API supports the ISO 8601 format for date/time fields. This allows you to pass in the level of detail you need to. When a field is not specified, the earliest possible value is the default. For example, if you do not specify a time of day, we will default to 00:00 (midnight). Similarly, not specifying a timezone defaults the timezone to GMT. The full representation is of the format:
    ```
    yyyy-MM-ddTHH:mm:ss.SSSZ
    ```
    This table illustrates some example valid dates and times:

    | Input | Equivalent to |
    | ------ | ----------- |
    | 2016 | 2016-01-01T00:00:00.000Z |
    | 2016-04 | 2016-04-01T00:00:00.000Z |
    | 2016-04-15 | 2016-04-15T00:00:00.000Z |
    | 2016-04-15T16 | 2016-04-15T16:00:00.000Z |
    | 2016-04-15T16:15 | 2016-04-15T16:15:00.000Z |
    | 2016-04-15T16:15Z | 2016-04-15T16:15:00.000Z (GMT time zone) |
    | 2016-04-15T16:15-0300 | 2016-04-15T16:15:00.000-0300 (Brazil time zone) |
  title: Zephyr Scale Server API (v1)
  version: "1.0"
servers:
  - url: "https://{host}{basePath}"
    variables:
      host:
        default: team.atlassian.com
      basePath:
        default: /rest/atm/1.0
paths:
  /testcase:
    post:
      description: |
        Creates a new Test Case.

        Whitespace is not allowed for labels, and it will be replaced by an underscore character.
        The field ```type``` of Test Script can have the values ```PLAIN_TEXT```, ```STEP_BY_STEP``` or ```BDD```. The field ```text``` describes the content of the plain text or BDD test script; otherwise, the steps can be described as objects using the field ```steps```.
        Call To Tests can be added to the steps list by using the field ```testCaseKey``` with a Test Case key as value.
        The optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.
        The fields ```status``` and ```priority``` will be set to default values if not defined.
        The optional field parameters has two attributes: variables and entries. For attribute variables, two types are allowed: FREE_TEXT and DATA_SET. If using DATA_SET, an extra field should be informed, having the name of the dataset. If the dataset doesn’t exist, it will be automatically created. Attribute entries must only have values matching the informed variables. If a value of a dataset doesn’t exist, it will be automatically created for that dataset. Check the examples below for more details.
      operationId: createTestCase
      requestBody:
        content:
          application/json:
            example: Can not resolve testcase_post.example
            schema:
              $ref: '#/components/schemas/testCase'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_response_key.example
          description: The Test Case was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-content-type: application/json
      x-accepts: application/json
  /testcase/{testCaseKey}:
    delete:
      description: |
        Delete the Test Case matching the given key.
      operationId: deleteTestCaseByTestCaseKey
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "204":
          description: The Test Case was successfully deleted.
        "404":
          description: No Test Case has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
    get:
      description: |
        Retrieve the Test Case matching the given key.
      operationId: getTestCaseByTestCaseKey
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
        - description: "The fields of the Test Case to be included on the response.\
          \ If not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_get.example
          description: The Test Case was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
    put:
      description: |
        Updates a Test Case.

        Whitespace is not allowed for labels, and it will be replaced by an underscore character.
        The field ```type``` of Test Script can have the values ```PLAIN_TEXT```, ```STEP_BY_STEP``` or ```BDD```. The field ```text``` describes the content of the plain text or BDD test script; otherwise, the steps can be described as objects using the field ```steps```.
        The field ```folder```, if defined, must contain an existent folder name. No folder will be created.
        Only fields present on the body will be updated. The field ```projectKey``` cannot be changed.
        Call To Tests can be added to the steps list by using the field ```testCaseKey``` with a Test Case key as value.
        The optional field parameters has two attributes: variables and entries. For attribute variables, two types are allowed: FREE_TEXT and DATA_SET. If using DATA_SET, an extra field should be informed, having the name of the dataset. If the dataset doesn’t exist, it will be automatically created. Attribute entries must only have values matching the informed variables. If a value of a dataset doesn’t exist, it will be automatically created for that dataset. Check the examples below for more details.
        For the field ```testScript```, when it is a step-by-step script:
        * If some step is missing in comparison to the target Test Case, it will be deleted.
        * Steps not having ```id``` will be considered as a new step and will be created.
        * Steps having ```id``` will be considered as existing steps and will be updated.
      operationId: updateTestCaseByTestCaseKey
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            example: Can not resolve testcase_put.example
            schema:
              $ref: '#/components/schemas/testCase'
        required: false
      responses:
        "200":
          description: The Test Case was successfully updated.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-content-type: application/json
      x-accepts: application/json
  /testcase/{testCaseKey}/attachments:
    get:
      description: |
        Retrieve the Test Case Attachments matching the given key.
      operationId: getTestCaseAttachments
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The Test Case Attachments were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified Test Case.
      operationId: createTestCaseAttachments
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-content-type: multipart/form-data
      x-accepts: application/json
  /testcase/{testCaseKey}/testresult/latest:
    get:
      description: Retrieve the last test result for a given key
      operationId: getLastTestResultByTestCaseKey
      parameters:
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testResult'
          description: The Last Test Result was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key or the Test
            Case has no results.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
  /testcase/{testCaseKey}/step/{stepIndex}/attachments:
    get:
      description: Retrieve the attachments for a test case step
      operationId: getAttachmentsFromStepByTestCaseKey
      parameters:
        - description: The index of the Test Case step.
          explode: false
          in: path
          name: stepIndex
          required: true
          schema:
            type: integer
          style: simple
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The test case step attachment was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key or the Step
            Index was not found.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified Step of a Test Case.
      operationId: createTestCaseStepAttachmentsByTestCaseKeyAndStepIndex
      parameters:
        - description: The index of the Test Case step.
          explode: false
          in: path
          name: stepIndex
          required: true
          schema:
            type: integer
          style: simple
        - description: The key of the Test Case.
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key or the Step
            Index was not found.
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-content-type: multipart/form-data
      x-accepts: application/json
  /testcase/search:
    get:
      description: |
        Retrieve the Test Cases that matches the query passed as parameter.
      operationId: findTestCase
      parameters:
        - description: "The fields of the Test Case to be included on the response.\
          \ If not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
        - description: |
            A query to filter Test Cases. The query syntax is similar to the JIRA JQL.
            
            * Available fields: ```projectKey```, ```key```, ```name```, ```status```, ```priority```, ```component```, ```folder```, ```estimatedTime```, ```labels```, ```owner``` and custom fields. When filtering by custom fields, the field name must be quoted.
            * Available operators: ```=```, ```>```, ```>=```, ```<```, ```<=```, ```IN```
            * For Single and Multi Choice custom fields, operator "=" is not supported, use "IN" instead
            * Available logical operators: ```AND```
            
            It is always a good idea considering using the ```projectKey``` field to match values that only belongs to that project, such as statuses, folders, etc.
            
            Folders always have to start with a "/", for instance: "/a folder". The "/" matches the root, above all folders.
            
            The query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.
            
            Usage examples:
            * projectKey = "JQA" AND status = "Draft" AND priority = "High"
            * projectKey = "JQA" AND status IN ("Draft", "Deprecated") AND labels IN ("Functional", "UI")
            * projectKey = "JQA" AND status IN ("Draft", "Deprecated") AND labels IN ("Functional", "UI")
            * projectKey = "JQA" AND status = "Draft" AND folder = "/"
            * projectKey = "JQA" AND folder = "/folder with some test cases"
            * projectKey = "JQA" AND folder = "/folder with some test cases/child folder"
            * projectKey = "JQA" AND folder IN ("/parent folder", "/parent folder/child folder")
            * projectKey = "JQA" AND "My Custom Field" = "Some value"
            * projectKey = "JQA" AND "Single Choice Custom Field" IN ("Some value")
            * projectKey = "JQA" AND "Multi Choice Custom Field" IN ("Some value", "Another value")
            * projectKey = "JQA" AND issueKeys IN ("JQA-5", "JQA-4")
            * key IN ("JQA-T50", "JTQ-T90")
            * key IN ("JQA-T50", "JTQ-T90") AND name = "My Test Case Name"
          explode: true
          in: query
          name: query
          required: false
          schema:
            type: string
          style: form
        - description: An offset to use with the query. This can be useful when paginating
            results.
          explode: true
          in: query
          name: startAt
          required: false
          schema:
            type: integer
          style: form
        - description: "The max result count, limiting the query results. If not provided,\
          \ the default value of 200 will be used."
          explode: true
          in: query
          name: maxResults
          required: false
          schema:
            type: integer
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testcases_get.example
          description: The Test Cases were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_search_response_error.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Cases
      x-accepts: application/json
  /testplan:
    post:
      description: |
        Creates a new Test Plan.

        Whitespace is not allowed for labels, and it will be replaced by an underscore character.
        The optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.
        The field ```status``` will be set to a default value if not defined.
      operationId: createTestPlan
      requestBody:
        content:
          application/json:
            example: Can not resolve testplan_post.example
            schema:
              type: string
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testplan_response_key.example
          description: The Test Plan was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testplan_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-content-type: application/json
      x-accepts: application/json
  /testplan/{testPlanKey}:
    delete:
      description: Delete the Test Plan matching the given key.
      operationId: deleteTestPlanByTestPlanKey
      parameters:
        - description: The key of the Test Plan.
          explode: false
          in: path
          name: testPlanKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "204":
          description: The Test Plan was successfully deleted.
        "404":
          description: No Test Plan has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-accepts: application/json
    get:
      description: |
        Retrieve the Test Plan matching the given key.
      operationId: getTestPlanByTestPlanKey
      parameters:
        - description: The key of the Test Plan.
          explode: false
          in: path
          name: testPlanKey
          required: true
          schema:
            type: string
          style: simple
        - description: "The fields of the Test Plan to be included on the response.\
          \ If not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testplan_get.example
          description: The Test Plan was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Plan has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-accepts: application/json
    put:
      description: |
        Updates a Test Plan.

        Whitespace is not allowed for labels, and it will be replaced by an underscore character.
        The optional field ```folder```, if defined, must contain an existent folder name. No folder will be created.
        The field ```status``` will be set to a default value if not defined.
      operationId: updateTestPlanByTestPlanKey
      parameters:
        - description: The key of the Test Plan.
          explode: false
          in: path
          name: testPlanKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            example: Can not resolve testplan_post.example
            schema:
              type: string
        required: false
      responses:
        "200":
          description: The Test Plan was successfully updated.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testplan_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-content-type: application/json
      x-accepts: application/json
  /testplan/{testPlanKey}/attachments:
    get:
      description: |
        Retrieve the Test Plan Attachments matching the given key.
      operationId: getTestPlanAttachmentsByTestPlanKey
      parameters:
        - description: The key of the Test Plan.
          explode: false
          in: path
          name: testPlanKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The Test Plan Attachments were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Plan has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified Test Plan.
      operationId: createTestPlanAttachmentsByTestPlanKey
      parameters:
        - description: The key of the Test Plan.
          explode: false
          in: path
          name: testPlanKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Plan has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-content-type: multipart/form-data
      x-accepts: application/json
  /testplan/search:
    get:
      description: |
        Retrieve the Test Plans that matches the query passed as parameter.
      operationId: findTestPlan
      parameters:
        - description: "The fields of the Test Plan to be included on the response.\
          \ If not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
        - description: |
            A query to filter Test Plans. The query syntax is similar to the JIRA JQL.
            
            * Available fields: ```projectKey```, ```key```, ```name```, ```status```, ```folder```, ```labels```, ```owner```, ```issueKeys``` and custom fields. When filtering by custom fields, the field name must be quoted.
            * Available operators: ```=```, ```>```, ```>=```, ```<```, ```<=```, ```IN```
            * For Single and Multi Choice custom fields, operator "=" is not supported, use "IN" instead
            * Available logical operators: ```AND```
            
            It is always a good idea considering using the ```projectKey``` field to match values that only belongs to that project, such as statuses, folders, etc.
            
            Folders always have to start with a "/", for instance: "/a folder". The "/" matches the root, above all folders.
            
            The query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.
            
            Usage examples:
            * projectKey = "JQA" AND status = "Draft"
            * projectKey = "JQA" AND status IN ("Draft", "Deprecated") AND labels IN ("Functional", "UI")
            * projectKey = "JQA" AND status = "Draft" AND folder = "/"
            * projectKey = "JQA" AND folder = "/folder with some test plans"
            * projectKey = "JQA" AND folder = "/folder with some test plans/child folder"
            * projectKey = "JQA" AND folder IN ("/parent folder", "/parent folder/child folder")
            * projectKey = "JQA" AND "My Custom Field" = "Some value"
            * projectKey = "JQA" AND "Single Choice Custom Field" IN ("Some value")
            * projectKey = "JQA" AND "Multi Choice Custom Field" IN ("Some value", "Another value")
            * projectKey = "JQA" AND issueKeys IN ("JQA-5", "JQA-4")
          explode: true
          in: query
          name: query
          required: false
          schema:
            type: string
          style: form
        - description: An offset to use with the query. This can be useful when paginating
            results.
          explode: true
          in: query
          name: startAt
          required: false
          schema:
            type: integer
          style: form
        - description: "The max result count, limiting the query results. If not provided,\
          \ the default value of 200 will be used."
          explode: true
          in: query
          name: maxResults
          required: false
          schema:
            type: integer
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testplans_get.example
          description: The Test Plans were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testcase_search_response_error.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Plan
      x-accepts: application/json
  /testrun:
    post:
      description: |
        Creates a new Test Run.

        The fields ```plannedStartDate``` and ```plannedEndDate``` will be set to default values if not defined.
        The field ```status``` will be automatically inferred based on the status of Test Run Items (field ```items```).
        The Test Run can be linked to a Test Plan, by setting a valid value on field testPlanKey. Also, it can be linked to an issue, by setting a valid value on field issueKey.
        All Test Result fields are allowed for Test Run Items (field ```items```).
      operationId: createTestRun
      requestBody:
        content:
          application/json:
            example: Can not resolve testrun_post.example
            schema:
              $ref: '#/components/schemas/testrun'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testrun_response_key.example
          description: The Test Run was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testrun_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      tags:
        - Test Run
      x-content-type: application/json
      x-accepts: application/json
  /testrun/{testRunKey}:
    delete:
      description: |
        Delete the Test Run matching the given key.
      operationId: deleteTestRunByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "204":
          description: The Test Run was successfully deleted.
        "404":
          description: No Test Run has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-accepts: application/json
    get:
      description: |
        Retrieve the Test Run matching the given key.
      operationId: getTestRunByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
        - description: "The fields of the Test Run to be included on the response. If\
          \ not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testrun_get.example
          description: The Test Run was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Run has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-accepts: application/json
  /testrun/{testRunKey}/attachments:
    get:
      description: |
        Retrieve the Test Run Attachments matching the given key.
      operationId: getTestRunAttachmentsByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The Test Run Attachments were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Run has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified Test Run.
      operationId: createAttachmentsByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Run has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-content-type: multipart/form-data
      x-accepts: application/json
  /testrun/{testRunKey}/testcase/{testCaseKey}/testresult:
    post:
      description: |
        Creates a new Test Result on the specified Test Run, looking for an item that matches the ```testCaseKey``` and the query string filter parameters.
        If more than one item is found using the specified parameters, only the first one of them will have the new Test Result created.
        Once created, the new Test Result can be seen inside the specified Test Run, looking for a Test Case that matches the request parameters.
        The fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.

        Deprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:

        ```executionDate``` is now represented by ```actualEndDate```

        ```userKey``` is now represented by ```executedBy```
      operationId: createTestResultByTestRunKeyAndTestCaseKey
      parameters:
        - description: The key of the Test Case
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
        - description: The environment to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: environment
          required: true
          schema:
            type: string
          style: form
        - description: The user key to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: userKey
          required: true
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/json:
            example: Can not resolve embeddedtestresult_post.example
            schema:
              $ref: '#/components/schemas/embeddedtestresult'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_id.example
          description: The Test Result was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: |
        Updates the last Test Result on the specified Test Run, looking for an item that matches the testCaseKey and the query string filter parameters. Only defined fields will be updated.
        If more than one item is found using the specified parameters, only the first one of them will have the Test Result updated.
        The updated data can be seen inside the specified Test Run, looking for the last Test Results of the Test Case that matches the request parameters.
      operationId: updateTestResultByTestRunKeyAndTestCaseKey
      parameters:
        - description: The key of the Test Case
          explode: false
          in: path
          name: testCaseKey
          required: true
          schema:
            type: string
          style: simple
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
        - description: The environment to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: environment
          required: true
          schema:
            type: string
          style: form
        - description: The user key to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: userKey
          required: true
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/json:
            example: Can not resolve embeddedtestresult_post.example
            schema:
              $ref: '#/components/schemas/embeddedtestresult'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_id.example
          description: The last Test Result was successfully updated.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-content-type: application/json
      x-accepts: application/json
  /testrun/{testRunKey}/testresults:
    get:
      description: |
        Retrieve All Test Results linked to a Test Run.
      operationId: getTestResultsByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testResult'
          description: The Test Result list was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Run has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-accepts: application/json
    post:
      description: |
        Create new Test Results on the specified Test Run, looking for items that match the ```testCaseKey``` for each body item.
        Once created, the new Test Results can be seen inside the specified Test Run, looking for Test Cases that match the request parameters.
        The fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.

        Deprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:

        ```executionDate``` is now represented by ```actualEndDate```

        ```userKey``` is now represented by ```executedBy```
      operationId: createTestResultsByTestRunKey
      parameters:
        - description: The key of the Test Run.
          explode: false
          in: path
          name: testRunKey
          required: true
          schema:
            type: string
          style: simple
        - description: The environment to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: environment
          required: true
          schema:
            type: string
          style: form
        - description: The user key to be optionally matched by an item on the Test
            Run.
          explode: true
          in: query
          name: userKey
          required: true
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/json:
            example: Can not resolve embeddedtestresults_post.example
            schema:
              $ref: '#/components/schemas/embeddedtestresult'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_ids.example
          description: The Test Results were successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-content-type: application/json
      x-accepts: application/json
  /testrun/search:
    get:
      description: |
        Retrieve the Test Runs that matches the query passed as parameter.
      operationId: findTestRun
      parameters:
        - description: "The fields of the Test Run to be included on the response. If\
          \ not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
        - description: |
            A query to filter Test Runs. The query syntax is similar to the JIRA JQL.
            
            * Available fields: ```projectKey```, ```folder```
            * Available operators: ```=```, ```IN```
            * Available logical operators: ```AND```
            
            The query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.
            
            Usage example:
            * projectKey = "JQA"
            * projectKey IN ("JQA", "DEF")
            * projectKey = "JQA" AND folder = "/Orbiter"
            * projectKey IN ("JQA", "DEF") AND folder = "/Orbiter/Propellant"
            * folder = "/Orbiter"
          explode: true
          in: query
          name: query
          required: false
          schema:
            type: string
          style: form
        - description: An offset to use with the query. This can be useful when paginating
            results.
          explode: true
          in: query
          name: startAt
          required: false
          schema:
            type: integer
          style: form
        - description: "The max result count, limiting the query results. If not provided,\
          \ the default value of 200 will be used."
          explode: true
          in: query
          name: maxResults
          required: false
          schema:
            type: integer
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testruns_get.example
          description: The Test Runs were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testrun_search_response_error.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Run
      x-accepts: application/json
  /testresult:
    post:
      description: |
        Creates a new Test Result for a Test Case.

        Once created, a new Test Result can be seen on the "Execution" tab of the specified Test Case. This Test Result is not linked with any Test Run.
        The fields ```actualStartDate```, ```actualEndDate``` and ```status``` will be set to default values if not defined.

        Deprecation notice - The fields ```executionDate``` and ```userKey``` are deprecated. Please use their new equivalents:

        ```executionDate``` is now represented by ```actualEndDate```

        ```userKey``` is now represented by ```executedBy```
      operationId: createTestResult
      requestBody:
        content:
          application/json:
            example: Can not resolve testresult_post.example
            schema:
              $ref: '#/components/schemas/testResult'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_id.example
          description: The Test Result was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve testresult_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Test Result
      x-content-type: application/json
      x-accepts: application/json
  /testresult/{testResultId}/attachments:
    get:
      description: Retrieve the Test Result Attachments matching the given id.
      operationId: getAttachmentsByTestResultId
      parameters:
        - description: The id of the Test Result.
          explode: false
          in: path
          name: testResultId
          required: true
          schema:
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The Test Result Attachments were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Case has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Test Result
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified Test Result.
      operationId: createAttachmentsByTestResultId
      parameters:
        - description: The id of the Test Result.
          explode: false
          in: path
          name: testResultId
          required: true
          schema:
            type: integer
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Result has been found with the given id.
      security:
        - basic: [ ]
      tags:
        - Test Result
      x-content-type: multipart/form-data
      x-accepts: application/json
  /testresult/{testResultId}/step/{stepIndex}/attachments:
    get:
      description: |
        Retrieve the Test Result Step Attachments matching the given testResultId and stepIndex.
      operationId: get_testresult-testResultId-step-stepIndex-attachments
      parameters:
        - description: The id of the Test Result.
          explode: false
          in: path
          name: testResultId
          required: true
          schema:
            type: integer
          style: simple
        - description: The index of the Test Result step.
          explode: false
          in: path
          name: stepIndex
          required: true
          schema:
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
          description: The Test Result Step Attachments were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Result Step has been found with the given testResultId
            and stepIndex.
      security:
        - basic: [ ]
      tags:
        - Test Result
      x-accepts: application/json
    post:
      description: Create a new attachment on the specified step of the Test Result.
      operationId: createAttachmentsByTestResultIdAndStepIndex
      parameters:
        - description: The id of the Test Result.
          explode: false
          in: path
          name: testResultId
          required: true
          schema:
            type: integer
          style: simple
        - description: The index of the Test Result step.
          explode: false
          in: path
          name: stepIndex
          required: true
          schema:
            type: integer
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: "The file to be uploaded, using ```multipart/form-data```\
                \ content type."
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_id.example
          description: The attachment was successfully created.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Test Result step has been found with the given id and index
            value.
      security:
        - basic: [ ]
      tags:
        - Test Result
      x-content-type: multipart/form-data
      x-accepts: application/json
  /issuelink/{issueKey}/testcases:
    get:
      description: |
        Retrieve all Test Cases linked to an Issue.
      operationId: getIssueLinkByIssueKey
      parameters:
        - description: The key of the linked Issue.
          explode: false
          in: path
          name: issueKey
          required: true
          schema:
            type: string
          style: simple
        - description: "The fields of the Test Case to be included on the response.\
          \ If not set, all fields will be returned. Inexistent fields will be ignored."
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve testcases_get.example
          description: The Test Cases were successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
        "404":
          description: No Issue has been found with the given key.
      security:
        - basic: [ ]
      tags:
        - Issue Link
      x-accepts: application/json
  /folder:
    post:
      description: |
        Creates a new folder for test cases, test plans or test runs.

        In order to create a new folder you must POST a json with 3 fields: projectKey, name and type. The field type can
        be filled with TEST_CASE, TEST_PLAN or TEST_RUN.
      operationId: createFolder
      requestBody:
        content:
          application/json:
            example: Can not resolve folder_post.example
            schema:
              $ref: '#/components/schemas/folder'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve folder_response_id.example
          description: The Folder was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve folder_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Folder
      x-content-type: application/json
      x-accepts: application/json
  /folder/{folderId}:
    put:
      description: |
        Updates a folder for test cases, test plans or test runs.

        You can only update the name or the custom field value of a folder, in order to do that you must PUT a json with 2 fields: name and customFields.
        The field name is a String and forward and backslashes are not allowed.
        The field customFields is an object with the key being the custom field name.
      operationId: updateFolderByFolderId
      parameters:
        - description: The id of the Folder.
          explode: false
          in: path
          name: folderId
          required: true
          schema:
            type: integer
          style: simple
      requestBody:
        content:
          application/json:
            example: Can not resolve folder_put.example
            schema:
              $ref: '#/components/schemas/folder'
        required: false
      responses:
        "200":
          description: The Folder was successfully updated.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve folder_update_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Folder
      x-content-type: application/json
      x-accepts: application/json
  /attachments/{id}:
    delete:
      description: Delete an Attachment given an id
      operationId: deleteAttachmentsById
      parameters:
        - explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        "204":
          description: The Attachment was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve attachment_response_cant_delete.example
          description: The Attachment can't be deleted.
        "404":
          description: No Attachment has been found with the given id.
      security:
        - basic: [ ]
      tags:
        - Attachments
      x-accepts: application/json
  /environments:
    get:
      description: |
        Retrieve the Environments matching the given projectKey.

        The project must exist
        The project must have Zephyr Scale enabled
      operationId: getEnvironments
      parameters:
        - description: The key of the Project
          explode: true
          in: query
          name: projectKey
          required: true
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve environments_get.example
          description: The Environments were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve environments_get_response_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Environments
      x-accepts: application/json
    post:
      description: |
        Creates a new Environment.

        The project must exist
        The project must have Zephyr Scale enabled
        The name must be unique
      operationId: createEnvironments
      requestBody:
        content:
          application/json:
            example: Can not resolve environments_post.example
            schema:
              $ref: '#/components/schemas/environment'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve environments_response_id.example
          description: The Environment was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve environments_response_post_fielderror.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Environments
      x-content-type: application/json
      x-accepts: application/json
  /automation/execution/{projectKey}:
    post:
      description: |
        Creates a new Test Cycle based on provided automated test results.
        This endpoint receives a zip file containing one or more Zephyr Scale Test Results File Format to create the Test Cycle. See [Zephyr Scale JUnit Integration](https://bitbucket.org/smartbeartm4j/tm4j-junit-integration) to learn how to generate this file.
        Optionally, you can send a `testCycle` part in your form data to customize the created Test Cycle.
      operationId: createAutomationTestCycleByProjectKey
      parameters:
        - description: The key of the Project.
          explode: false
          in: path
          name: projectKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            example: Can not resolve automation_testcycle_formparam.example
            schema:
              description: A JSON object to customize the new Test Cycle.
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve automation_post_response.example
          description: The Test Run was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve automation_custom_file_response_post_error.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Automation
      x-content-type: multipart/form-data
      x-accepts: application/json
  /automation/execution/cucumber/{projectKey}:
    post:
      description: |
        Creates a new Test Cycle based on provided automated test results.
        This endpoint receives a zip file containing one or more [Cucumber Json Output file](https://relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter).
        Optionally, you can send a `testCycle` part in your form data to customize the created Test Cycle.
      operationId: createAutomationExecutionCucumberByProjectKey
      parameters:
        - description: The key of the Project.
          explode: false
          in: path
          name: projectKey
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          multipart/form-data:
            example: Can not resolve automation_testcycle_formparam.example
            schema:
              description: A JSON object to customize the new Test Cycle.
              type: string
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve automation_post_response.example
          description: The Test Run was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve automation_custom_file_response_post_error.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Automation
      x-content-type: multipart/form-data
      x-accepts: application/json
  /automation/testcases:
    get:
      description: |
        Retrieve a zip file containing Cucumber Feature Files that matches the tql passed as parameter.
      operationId: getCucumberFeatureFiles
      parameters:
        - description: |
            A Zephyr Scale TQL to filter Test Cases. The param syntax is similar to the JIRA JQL.
            
            * Available fields: ```projectKey```.
            * Available operators: ```=```, ```IN```
            
            Usage examples:
            * testCase.projectKey = 'JQA'
            * testCase.projectKey IN ('JQA', 'JQB')
          explode: true
          in: query
          name: tql
          required: true
          schema:
            type: string
          style: form
      responses:
        "200":
          description: The Cucumber Feature Files were successfully retrieved.
        "204":
          description: No Test Cases found for the query.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Automation
      x-accepts: application/json
  /project:
    post:
      description: |
        Create a Zephyr Scale project for an existing Jira project. If the Zephyr Scale project exists, enable/disable it
      operationId: createProject
      requestBody:
        content:
          application/json:
            example: Can not resolve project_post.example
            schema:
              $ref: '#/components/schemas/project'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve project_post_response.example
          description: The Zephyr Scale Project was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve project_response_invalidproject.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Project
      x-content-type: application/json
      x-accepts: application/json
  /customfield:
    post:
      description: |
        Creates a new custom field for test cases, test plans, test runs, test result or folder.
        The custom fied name must be unique by project and category.

        Custom fields must have one of these categories:
        `TEST_PLAN`, `TEST_RUN`, `TEST_STEP`, `TEST_EXECUTION`, `TEST_CASE` or `FOLDER`.

        Custom fields must have of these types: `SINGLE_LINE_TEXT`, `MULTI_LINE_TEXT`, `NUMBER`, `DATE`, `SINGLE_CHOICE_SELECT_LIST`,
        `CHECKBOX`, `DECIMAL`, `MULTI_CHOICE_SELECT_LIST` or `USER_LIST`.
      operationId: createCustomField
      requestBody:
        content:
          application/json:
            example: Can not resolve customfield_post.example
            schema:
              $ref: '#/components/schemas/customfield'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve customfield_post_response.example
          description: The custom field was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve customfield_response_duplicatedname.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Custom Field
      x-content-type: application/json
      x-accepts: application/json
  /customfield/{customFieldId}/option:
    post:
      description: |
        Creates a new custom field option for `SINGLE_CHOICE_SELECT_LIST` or `MULTI_CHOICE_SELECT_LIST` custom field.
      operationId: createCustomFieldOptionByCustomFieldId
      parameters:
        - explode: false
          in: path
          name: customFieldId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            example: Can not resolve customfieldoption_post.example
            schema:
              $ref: '#/components/schemas/customfieldoption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                example: Can not resolve customfieldoption_post_response.example
          description: The custom field option was successfully created.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve customfieldoption_response_notsupported.example
          description: Some parameters are invalid or not found.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Custom Field
      x-content-type: application/json
      x-accepts: application/json
  /delete/executiondeletion:
    post:
      description: |
        Starts the deletion process of Test Executions (also known as Test Results). This process only removes executions older than 3 months and it will keep the last test executions.
        `projectKey` is the key of the project to delete executions from. If it is not provided, executions from all projects will be deleted.
        Only Jira Admin users can execute this process.
      operationId: deleteTestResults
      requestBody:
        content:
          application/json:
            example: Can not resolve executiondeletion.example
            schema:
              $ref: '#/components/schemas/executiondeletion'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve executiondeletion_post_response.example
          description: The deletion process has started.
        "400":
          content:
            application/json:
              schema:
                example: Can not resolve executiondeletion_response_invalid_date.example
          description: Some parameters are invalid (For example&#58; You cannot delete
            executions created in the last 3 months)
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Delete Execution
      x-content-type: application/json
      x-accepts: application/json
  /delete/executiondeletion/status:
    get:
      description: |
        Gets the status of the test execution deletion process. The statuses can be: IN_PROGRESS, FINISHED or FAILED.
      operationId: getDeleteExecutionStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                example: Can not resolve executiondeletion_status_get_response.example
          description: The Status of the deletion process was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                example: Can not resolve response_autherror.example
          description: "Authentication error. See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest)\
            \ docs for details."
      security:
        - basic: [ ]
      tags:
        - Delete Execution
      x-accepts: application/json
components:
  callbacks: { }
  examples: { }
  headers: { }
  links: { }
  parameters: { }
  requestBodies: { }
  responses: { }
  schemas:
    embeddedtestresult:
      type: string
    testrun:
      type: string
    folder:
      type: string
    environment:
      type: string
    project:
      type: string
    customfield:
      type: string
    customfieldoption:
      type: string
    executiondeletion:
      type: string
    testCase:
      properties:
        key:
          type: string
        projectKey:
          type: string
        majorVersion:
          minimum: 0
          type: integer
        latestVersion:
          type: boolean
        createdBy:
          type: string
        name:
          type: string
        updatedBy:
          type: string
        updatedOn:
          example: 2024-04-04T22:22:30Z
          format: date-time
          type: string
        objective:
          type: string
        precondition:
          type: string
        folder:
          type: string
        status:
          type: string
        priority:
          type: string
        createdOn:
          example: 2024-04-04T22:31:48Z
          format: date-time
          type: string
        paramType:
          type: string
        component:
          type: string
        owner:
          type: string
        estimatedTime:
          type: integer
        labels:
          items:
            type: string
          type: array
        testScript:
          $ref: '#/components/schemas/testScript'
        issueLinks:
          items:
            type: string
          type: array
        lastTestResultStatus:
          type: string
        parameters:
          $ref: '#/components/schemas/parameter'
        testData:
          items:
            $ref: '#/components/schemas/testData'
          type: array
      required:
        - key
        - name
        - priority
        - projectKey
        - status
        - testScript
      type: object
    attachments:
      items:
        $ref: '#/components/schemas/attachment'
      type: array
    testResult:
      example:
        estimatedTime: 0.8008281904610115
        executedBy: executedBy
        actualEndDate: 2024-03-22T11:11:50Z
        traceLinks:
          - traceLinks
          - traceLinks
        attachments:
          - file: ""
            filename: filename
            id: 0.8008281904610115
            filesize: 6.027456183070403
            url: url
          - file: ""
            filename: filename
            id: 0.8008281904610115
            filesize: 6.027456183070403
            url: url
        customFields:
          key: customFields
        executionDate: 2024-03-22T11:11:50Z
        scriptResults:
          - traceLinks:
              - traceLinks
              - traceLinks
            testData: testData
            stepAttachmentsMapping: stepAttachmentsMapping
            expectedResult: expectedResult
            executionDate: executionDate
            parameterSetId: 6
            index: 1
            description: description
            comment: comment
            status: status
          - traceLinks:
              - traceLinks
              - traceLinks
            testData: testData
            stepAttachmentsMapping: stepAttachmentsMapping
            expectedResult: expectedResult
            executionDate: executionDate
            parameterSetId: 6
            index: 1
            description: description
            comment: comment
            status: status
        assignedTo: assignedTo
        userKey: userKey
        executionTime: 5
        testCaseKey: testCaseKey
        environment: environment
        automated: true
        projectKey: projectKey
        actualStartDate: 2024-03-22T11:11:50Z
        comment: comment
        id: 5
        projectId: 2
        key: key
        status: status
      properties:
        estimatedTime:
          type: number
        executedBy:
          type: string
        actualEndDate:
          example: 2024-03-22T11:11:50Z
          format: date-time
          type: string
        traceLinks:
          items:
            type: string
          type: array
        executionDate:
          example: 2024-03-22T11:11:50Z
          format: date-time
          type: string
        scriptResults:
          items:
            $ref: '#/components/schemas/scriptResult'
          type: array
        assignedTo:
          type: string
        userKey:
          type: string
        executionTime:
          type: integer
        testCaseKey:
          type: string
        environment:
          type: string
        automated:
          type: boolean
        actualStartDate:
          example: 2024-03-22T11:11:50Z
          format: date-time
          type: string
        comment:
          type: string
        id:
          type: integer
        projectKey:
          type: string
        projectId:
          type: integer
        key:
          type: string
        status:
          type: string
        customFields:
          additionalProperties:
            type: string
          type: object
        attachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
      type: object
    testScript:
      properties:
        type:
          type: string
        id:
          type: integer
        steps:
          items:
            $ref: '#/components/schemas/step'
          type: array
      required:
        - id
        - type
      type: object
    parameter:
      properties:
        variables:
          items:
            $ref: '#/components/schemas/variable'
          type: array
        entries:
          items:
            additionalProperties:
              type: string
            type: object
          type: array
      required:
        - entries
        - variables
      type: object
    testData:
      properties:
        entries:
          items:
            $ref: '#/components/schemas/testDataEntry'
          type: array
        id:
          type: number
      type: object
    attachment:
      example:
        file: ""
        filename: filename
        id: 0.8008281904610115
        filesize: 6.027456183070403
        url: url
      properties:
        file:
          format: binary
          type: string
        id:
          type: number
        url:
          type: string
        filename:
          type: string
        filesize:
          type: number
      type: object
    scriptResults:
      items:
        $ref: '#/components/schemas/scriptResult'
      type: array
    steps:
      items:
        $ref: '#/components/schemas/step'
      type: array
    variable:
      properties:
        name:
          type: string
        type:
          type: string
      type: object
    testDataEntry:
      properties:
        name:
          type: string
        index:
          type: number
        id:
          type: number
        value:
          type: string
      type: object
    scriptResult:
      example:
        traceLinks:
          - traceLinks
          - traceLinks
        testData: testData
        stepAttachmentsMapping: stepAttachmentsMapping
        expectedResult: expectedResult
        executionDate: executionDate
        parameterSetId: 6
        index: 1
        description: description
        comment: comment
        status: status
      properties:
        traceLinks:
          items:
            type: string
          type: array
        testData:
          type: string
        parameterSetId:
          type: integer
        stepAttachmentsMapping:
          type: string
        expectedResult:
          type: string
        executionDate:
          type: string
        index:
          type: integer
        description:
          type: string
        comment:
          type: string
        status:
          type: string
      type: object
    step:
      properties:
        testCaseKey:
          type: string
        stepParameters:
          items:
            $ref: '#/components/schemas/stepParameter'
          type: array
        id:
          type: number
        index:
          type: integer
        description:
          type: string
        testData:
          type: string
        expectedResult:
          type: string
      required:
        - id
        - index
      type: object
    stepParameter:
      properties:
        testCaseParameter:
          $ref: '#/components/schemas/testCaseParameter'
        id:
          type: number
        value:
          type: string
      required:
        - id
      type: object
    testCaseParameter:
      properties:
        testCaseKey:
          type: string
        defaultValue:
          type: string
        id:
          type: number
        index:
          type: number
        name:
          type: string
      required:
        - id
        - index
      type: object
  securitySchemes:
    basic:
      description: |
        See the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest) docs for details.
      scheme: basic
      type: http

