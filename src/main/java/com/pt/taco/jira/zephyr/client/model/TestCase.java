/*
 * Zephyr Scale Server API (v1)
 * ## DISCLAIMER  We strongly discourage and do not endorse using private APIs for any purpose. Important points to remember:  1. **Non-Endorsement**: We do not support or endorse private API usage.  2. **API Changes**: Private APIs may change without notice; use them at your own risk.  3. **Data Responsibility**: We are not responsible for issues arising from private API use, such ***as data corruption***.  Please follow our terms of service and official ***public*** APIs for a stable and secure application experience. Unauthorized private API use may lead to instability and ***data corruption***.  ## Accessing the API The Zephyr Scale REST API is ready to use if you have Zephyr Scale installed on your JIRA instance. All API uses the following base URL: ``` http://your-jira-host:port/your-jira-context/rest/atm/1.0/ ``` For instance, you can create test results using the \"testresult\" api: ``` POST http://localhost:2990/jira/rest/atm/1.0/testresult ```  ## Authentication Basics Any authentication that works with JIRA will work with the Zephyr Scale REST API. The prefered authentication methods are OAuth and HTTP Basic. See the [JIRA SERVER REST API](https://developer.atlassian.com/server/jira/platform/rest-apis) docs for details. ## Using Status and Environment Fields Some entities, such as the Test Results, may have status and environment fields. The values of these fields are identified by name, not by the localized name. Both fields may have custom values defined by the user on the Zephyr Scale configuration area. All values are **case sensitive**, and they must be set just as displayed on the add-on.  These are the default values, which must be used on the APIs instead of their localized versions: * Test Cases:   * Draft   * Approved   * Deprecated  * Test Runs:   * Not Executed   * In Progress   * Done  * Test Results:   * Not Executed   * In Progress   * Pass   * Fail   * Blocked ## Handling Date Format The API supports the ISO 8601 format for date/time fields. This allows you to pass in the level of detail you need to. When a field is not specified, the earliest possible value is the default. For example, if you do not specify a time of day, we will default to 00:00 (midnight). Similarly, not specifying a timezone defaults the timezone to GMT. The full representation is of the format: ``` yyyy-MM-ddTHH:mm:ss.SSSZ ``` This table illustrates some example valid dates and times:  | Input | Equivalent to | | ------ | ----------- | | 2016 | 2016-01-01T00:00:00.000Z | | 2016-04 | 2016-04-01T00:00:00.000Z | | 2016-04-15 | 2016-04-15T00:00:00.000Z | | 2016-04-15T16 | 2016-04-15T16:00:00.000Z | | 2016-04-15T16:15 | 2016-04-15T16:15:00.000Z | | 2016-04-15T16:15Z | 2016-04-15T16:15:00.000Z (GMT time zone) | | 2016-04-15T16:15-0300 | 2016-04-15T16:15:00.000-0300 (Brazil time zone) |
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pt.taco.jira.zephyr.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.gson.annotations.SerializedName;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TestCase
 */
@Setter
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TestCase {
    public static final String SERIALIZED_NAME_KEY = "key";
    public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
    public static final String SERIALIZED_NAME_MAJOR_VERSION = "majorVersion";
    public static final String SERIALIZED_NAME_LATEST_VERSION = "latestVersion";
    public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
    public static final String SERIALIZED_NAME_KEY_NUMBER = "keyNumber";
    public static final String SERIALIZED_NAME_UPDATED_ON = "updatedOn";
    public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
    public static final String SERIALIZED_NAME_PRECONDITION = "precondition";
    public static final String SERIALIZED_NAME_FOLDER = "folder";
    public static final String SERIALIZED_NAME_STATUS = "status";
    public static final String SERIALIZED_NAME_PRIORITY = "priority";
    public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
    public static final String SERIALIZED_NAME_PARAM_TYPE = "paramType";
    public static final String SERIALIZED_NAME_COMPONENT = "component";
    public static final String SERIALIZED_NAME_OWNER = "owner";
    public static final String SERIALIZED_NAME_ESTIMATED_TIME = "estimatedTime";
    public static final String SERIALIZED_NAME_LABELS = "labels";
    public static final String SERIALIZED_NAME_TEST_SCRIPT = "testScript";
    public static final String SERIALIZED_NAME_ISSUE_LINKS = "issueLinks";
    public static final String SERIALIZED_NAME_LAST_TEST_RESULT_STATUS = "lastTestResultStatus";
    public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
    public static final String SERIALIZED_NAME_TEST_DATA = "testData";
    @SerializedName(SERIALIZED_NAME_KEY)
    private String key;
    @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
    private String projectKey;
    @SerializedName(SERIALIZED_NAME_MAJOR_VERSION)
    private Integer majorVersion;
    @SerializedName(SERIALIZED_NAME_LATEST_VERSION)
    private Boolean latestVersion;
    @SerializedName(SERIALIZED_NAME_CREATED_BY)
    private String createdBy;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    @SerializedName(SERIALIZED_NAME_UPDATED_BY)
    private String updatedBy;
    @Getter @Setter
    @SerializedName(SERIALIZED_NAME_KEY_NUMBER)
    private String keyNumber;
    @SerializedName(SERIALIZED_NAME_UPDATED_ON)
    private String updatedOn;
    @SerializedName(SERIALIZED_NAME_OBJECTIVE)
    private String objective;
    @SerializedName(SERIALIZED_NAME_PRECONDITION)
    private String precondition;
    @SerializedName(SERIALIZED_NAME_FOLDER)
    private String folder;
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;
    @SerializedName(SERIALIZED_NAME_PRIORITY)
    private String priority;
    @SerializedName(SERIALIZED_NAME_CREATED_ON)
    private String createdOn;
    @SerializedName(SERIALIZED_NAME_PARAM_TYPE)
    private String paramType;
    @SerializedName(SERIALIZED_NAME_COMPONENT)
    private String component;
    @SerializedName(SERIALIZED_NAME_OWNER)
    private String owner;
    @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME)
    private Integer estimatedTime;
    @SerializedName(SERIALIZED_NAME_LABELS)
    private List<String> labels;
    @SerializedName(SERIALIZED_NAME_TEST_SCRIPT)
    private TestScript testScript;
    @SerializedName(SERIALIZED_NAME_ISSUE_LINKS)
    private List<String> issueLinks;
    @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_STATUS)
    private String lastTestResultStatus;
    @SerializedName(SERIALIZED_NAME_PARAMETERS)
    private Parameter parameters;
    @SerializedName(SERIALIZED_NAME_TEST_DATA)
    private List<TestData> testData;

    private List<Attachment> attachmentList;

    public TestCase key(String key) {

        this.key = key;
        return this;
    }

    /**
     * Get key
     *
     * @return key
     **/
    @Nonnull

    public String getKey() {
        return key;
    }


    public TestCase projectKey(String projectKey) {

        this.projectKey = projectKey;
        return this;
    }

    /**
     * Get projectKey
     *
     * @return projectKey
     **/
    @Nonnull

    public String getProjectKey() {
        return projectKey;
    }


    public TestCase majorVersion(Integer majorVersion) {

        this.majorVersion = majorVersion;
        return this;
    }

    /**
     * Get majorVersion
     * minimum: 0
     *
     * @return majorVersion
     **/
    @Nullable

    public Integer getMajorVersion() {
        return majorVersion;
    }


    public TestCase latestVersion(Boolean latestVersion) {

        this.latestVersion = latestVersion;
        return this;
    }

    /**
     * Get latestVersion
     *
     * @return latestVersion
     **/
    @Nullable

    public Boolean isLatestVersion() {
        return latestVersion;
    }


    public TestCase createdBy(String createdBy) {

        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get createdBy
     *
     * @return createdBy
     **/
    @Nullable

    public String getCreatedBy() {
        return createdBy;
    }


    public TestCase name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Nonnull

    public String getName() {
        return name;
    }


    public TestCase updatedBy(String updatedBy) {

        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get updatedBy
     *
     * @return updatedBy
     **/
    @Nullable

    public String getUpdatedBy() {
        return updatedBy;
    }


    public TestCase updatedOn(String updatedOn) {

        this.updatedOn = updatedOn;
        return this;
    }

    /**
     * Get updatedOn
     *
     * @return updatedOn
     **/
    @Nullable
    public String getUpdatedOn() {
        return updatedOn;
    }


    public TestCase objective(String objective) {

        this.objective = objective;
        return this;
    }

    /**
     * Get objective
     *
     * @return objective
     **/
    @Nullable

    public String getObjective() {
        return objective;
    }


    public TestCase precondition(String precondition) {

        this.precondition = precondition;
        return this;
    }

    /**
     * Get precondition
     *
     * @return precondition
     **/
    @Nullable

    public String getPrecondition() {
        return precondition;
    }


    public TestCase folder(String folder) {

        this.folder = folder;
        return this;
    }

    /**
     * Get folder
     *
     * @return folder
     **/
    @Nullable

    public String getFolder() {
        return folder;
    }


    public TestCase status(String status) {

        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     **/
    @Nonnull

    public String getStatus() {
        return status;
    }


    public TestCase priority(String priority) {

        this.priority = priority;
        return this;
    }

    /**
     * Get priority
     *
     * @return priority
     **/
    @Nonnull

    public String getPriority() {
        return priority;
    }


    public TestCase createdOn(String createdOn) {
        this.createdOn = createdOn;
        return this;
    }

    /**
     * Get createdOn
     *
     * @return createdOn
     **/
    @Nullable

    public String getCreatedOn() {
        return createdOn;
    }


    public TestCase paramType(String paramType) {

        this.paramType = paramType;
        return this;
    }

    /**
     * Get paramType
     *
     * @return paramType
     **/
    @Nullable

    public String getParamType() {
        return paramType;
    }


    public TestCase component(String component) {

        this.component = component;
        return this;
    }

    /**
     * Get component
     *
     * @return component
     **/
    @Nullable

    public String getComponent() {
        return component;
    }


    public TestCase owner(String owner) {

        this.owner = owner;
        return this;
    }

    /**
     * Get owner
     *
     * @return owner
     **/
    @Nullable

    public String getOwner() {
        return owner;
    }


    public TestCase estimatedTime(Integer estimatedTime) {

        this.estimatedTime = estimatedTime;
        return this;
    }

    /**
     * Get estimatedTime
     *
     * @return estimatedTime
     **/
    @Nullable

    public Integer getEstimatedTime() {
        return estimatedTime;
    }


    public TestCase labels(List<String> labels) {

        this.labels = labels;
        return this;
    }

    public TestCase addLabelsItem(String labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<>();
        }
        this.labels.add(labelsItem);
        return this;
    }

    /**
     * Get labels
     *
     * @return labels
     **/
    @Nullable

    public List<String> getLabels() {
        return labels;
    }


    public TestCase testScript(TestScript testScript) {

        this.testScript = testScript;
        return this;
    }

    /**
     * Get testScript
     *
     * @return testScript
     **/
    @Nonnull

    public TestScript getTestScript() {
        return testScript;
    }


    public TestCase issueLinks(List<String> issueLinks) {

        this.issueLinks = issueLinks;
        return this;
    }

    public TestCase addIssueLinksItem(String issueLinksItem) {
        if (this.issueLinks == null) {
            this.issueLinks = new ArrayList<>();
        }
        this.issueLinks.add(issueLinksItem);
        return this;
    }

    /**
     * Get issueLinks
     *
     * @return issueLinks
     **/
    @Nullable

    public List<String> getIssueLinks() {
        return issueLinks;
    }


    public TestCase lastTestResultStatus(String lastTestResultStatus) {

        this.lastTestResultStatus = lastTestResultStatus;
        return this;
    }

    /**
     * Get lastTestResultStatus
     *
     * @return lastTestResultStatus
     **/
    @Nullable

    public String getLastTestResultStatus() {
        return lastTestResultStatus;
    }


    public List<Attachment> getAttachmentList() {
        return attachmentList;
    }

    public TestCase parameters(Parameter parameters) {

        this.parameters = parameters;
        return this;
    }

    /**
     * Get parameters
     *
     * @return parameters
     **/
    @Nullable

    public Parameter getParameters() {
        return parameters;
    }


    public TestCase testData(List<TestData> testData) {

        this.testData = testData;
        return this;
    }

    public TestCase addTestDataItem(TestData testDataItem) {
        if (this.testData == null) {
            this.testData = new ArrayList<>();
        }
        this.testData.add(testDataItem);
        return this;
    }

    /**
     * Get testData
     *
     * @return testData
     **/
    @Nullable

    public List<TestData> getTestData() {
        return testData;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TestCase testCase = (TestCase) o;
        return Objects.equals(this.key, testCase.key) &&
                Objects.equals(this.projectKey, testCase.projectKey) &&
                Objects.equals(this.majorVersion, testCase.majorVersion) &&
                Objects.equals(this.latestVersion, testCase.latestVersion) &&
                Objects.equals(this.createdBy, testCase.createdBy) &&
                Objects.equals(this.name, testCase.name) &&
                Objects.equals(this.updatedBy, testCase.updatedBy) &&
                Objects.equals(this.updatedOn, testCase.updatedOn) &&
                Objects.equals(this.objective, testCase.objective) &&
                Objects.equals(this.precondition, testCase.precondition) &&
                Objects.equals(this.folder, testCase.folder) &&
                Objects.equals(this.status, testCase.status) &&
                Objects.equals(this.priority, testCase.priority) &&
                Objects.equals(this.createdOn, testCase.createdOn) &&
                Objects.equals(this.paramType, testCase.paramType) &&
                Objects.equals(this.component, testCase.component) &&
                Objects.equals(this.owner, testCase.owner) &&
                Objects.equals(this.estimatedTime, testCase.estimatedTime) &&
                Objects.equals(this.labels, testCase.labels) &&
                Objects.equals(this.testScript, testCase.testScript) &&
                Objects.equals(this.issueLinks, testCase.issueLinks) &&
                Objects.equals(this.lastTestResultStatus, testCase.lastTestResultStatus) &&
                Objects.equals(this.parameters, testCase.parameters) &&
                Objects.equals(this.testData, testCase.testData);
    }

    @Override
    public int hashCode() {
        return Objects.hash(key, projectKey, majorVersion, latestVersion, createdBy, name, updatedBy, updatedOn, objective, precondition, folder, status, priority, createdOn, paramType, component, owner, estimatedTime, labels, testScript, issueLinks, lastTestResultStatus, parameters, testData);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TestCase {\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
        sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
        sb.append("    latestVersion: ").append(toIndentedString(latestVersion)).append("\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
        sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
        sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
        sb.append("    precondition: ").append(toIndentedString(precondition)).append("\n");
        sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
        sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
        sb.append("    paramType: ").append(toIndentedString(paramType)).append("\n");
        sb.append("    component: ").append(toIndentedString(component)).append("\n");
        sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
        sb.append("    estimatedTime: ").append(toIndentedString(estimatedTime)).append("\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("    testScript: ").append(toIndentedString(testScript)).append("\n");
        sb.append("    issueLinks: ").append(toIndentedString(issueLinks)).append("\n");
        sb.append("    lastTestResultStatus: ").append(toIndentedString(lastTestResultStatus)).append("\n");
        sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
        sb.append("    testData: ").append(toIndentedString(testData)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

