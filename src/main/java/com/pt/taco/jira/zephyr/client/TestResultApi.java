/*
 * Zephyr Scale Server API (v1)
 * ## DISCLAIMER  We strongly discourage and do not endorse using private APIs for any purpose. Important points to remember:  1. **Non-Endorsement**: We do not support or endorse private API usage.  2. **API Changes**: Private APIs may change without notice; use them at your own risk.  3. **Data Responsibility**: We are not responsible for issues arising from private API use, such ***as data corruption***.  Please follow our terms of service and official ***public*** APIs for a stable and secure application experience. Unauthorized private API use may lead to instability and ***data corruption***.  ## Accessing the API The Zephyr Scale REST API is ready to use if you have Zephyr Scale installed on your JIRA instance. All API uses the following base URL: ``` http://your-jira-host:port/your-jira-context/rest/atm/1.0/ ``` For instance, you can create test results using the \"testresult\" api: ``` POST http://localhost:2990/jira/rest/atm/1.0/testresult ```  ## Authentication Basics Any authentication that works with JIRA will work with the Zephyr Scale REST API. The prefered authentication methods are OAuth and HTTP Basic. See the [JIRA SERVER REST API](https://developer.atlassian.com/server/jira/platform/rest-apis) docs for details. ## Using Status and Environment Fields Some entities, such as the Test Results, may have status and environment fields. The values of these fields are identified by name, not by the localized name. Both fields may have custom values defined by the user on the Zephyr Scale configuration area. All values are **case sensitive**, and they must be set just as displayed on the add-on.  These are the default values, which must be used on the APIs instead of their localized versions: * Test Cases:   * Draft   * Approved   * Deprecated  * Test Runs:   * Not Executed   * In Progress   * Done  * Test Results:   * Not Executed   * In Progress   * Pass   * Fail   * Blocked ## Handling Date Format The API supports the ISO 8601 format for date/time fields. This allows you to pass in the level of detail you need to. When a field is not specified, the earliest possible value is the default. For example, if you do not specify a time of day, we will default to 00:00 (midnight). Similarly, not specifying a timezone defaults the timezone to GMT. The full representation is of the format: ``` yyyy-MM-ddTHH:mm:ss.SSSZ ``` This table illustrates some example valid dates and times:  | Input | Equivalent to | | ------ | ----------- | | 2016 | 2016-01-01T00:00:00.000Z | | 2016-04 | 2016-04-01T00:00:00.000Z | | 2016-04-15 | 2016-04-15T00:00:00.000Z | | 2016-04-15T16 | 2016-04-15T16:00:00.000Z | | 2016-04-15T16:15 | 2016-04-15T16:15:00.000Z | | 2016-04-15T16:15Z | 2016-04-15T16:15:00.000Z (GMT time zone) | | 2016-04-15T16:15-0300 | 2016-04-15T16:15:00.000-0300 (Brazil time zone) |
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pt.taco.jira.zephyr.client;

import com.google.gson.reflect.TypeToken;
import com.pt.taco.jira.zephyr.client.model.Attachment;
import com.pt.taco.jira.zephyr.client.model.TestResult;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.io.File;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.GET;
import static io.restassured.http.Method.POST;

public class TestResultApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private TestResultApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static TestResultApi testResult(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new TestResultApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if (reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createAttachmentsByTestResultId(),
                createAttachmentsByTestResultIdAndStepIndex(),
                createTestResult(),
                getAttachmentsByTestResultId(),
                getTestresultTestResultIdStepStepIndexAttachments()
        );
    }

    public CreateAttachmentsByTestResultIdOper createAttachmentsByTestResultId() {
        return new CreateAttachmentsByTestResultIdOper(createReqSpec());
    }

    public CreateAttachmentsByTestResultIdAndStepIndexOper createAttachmentsByTestResultIdAndStepIndex() {
        return new CreateAttachmentsByTestResultIdAndStepIndexOper(createReqSpec());
    }

    public CreateTestResultOper createTestResult() {
        return new CreateTestResultOper(createReqSpec());
    }

    public GetAttachmentsByTestResultIdOper getAttachmentsByTestResultId() {
        return new GetAttachmentsByTestResultIdOper(createReqSpec());
    }

    public GetTestresultTestResultIdStepStepIndexAttachmentsOper getTestresultTestResultIdStepStepIndexAttachments() {
        return new GetTestresultTestResultIdStepStepIndexAttachmentsOper(createReqSpec());
    }

    /**
     * Customize request specification
     *
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public TestResultApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create a new attachment on the specified Test Result.
     *
     * @see #testResultIdPath The id of the Test Result. (required)
     * return Object
     */
    public static class CreateAttachmentsByTestResultIdOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testresult/{testResultId}/attachments";
        public static final String TEST_RESULT_ID_PATH = "testResultId";
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAttachmentsByTestResultIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testresult/{testResultId}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testresult/{testResultId}/attachments
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testResultId (Integer) The id of the Test Result. (required)
         * @return operation
         */
        public CreateAttachmentsByTestResultIdOper testResultIdPath(Object testResultId) {
            reqSpec.addPathParam(TEST_RESULT_ID_PATH, testResultId);
            return this;
        }

        public CreateAttachmentsByTestResultIdOper file(File file) {
            reqSpec.addMultiPart(file);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestResultIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestResultIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Create a new attachment on the specified step of the Test Result.
     *
     * @see #testResultIdPath The id of the Test Result. (required)
     * @see #stepIndexPath The index of the Test Result step. (required)
     * return Object
     */
    public static class CreateAttachmentsByTestResultIdAndStepIndexOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testresult/{testResultId}/step/{stepIndex}/attachments";
        public static final String TEST_RESULT_ID_PATH = "testResultId";
        public static final String STEP_INDEX_PATH = "stepIndex";
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAttachmentsByTestResultIdAndStepIndexOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testresult/{testResultId}/step/{stepIndex}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testresult/{testResultId}/step/{stepIndex}/attachments
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testResultId (Integer) The id of the Test Result. (required)
         * @return operation
         */
        public CreateAttachmentsByTestResultIdAndStepIndexOper testResultIdPath(Object testResultId) {
            reqSpec.addPathParam(TEST_RESULT_ID_PATH, testResultId);
            return this;
        }

        /**
         * @param stepIndex (Integer) The index of the Test Result step. (required)
         * @return operation
         */
        public CreateAttachmentsByTestResultIdAndStepIndexOper stepIndexPath(Object stepIndex) {
            reqSpec.addPathParam(STEP_INDEX_PATH, stepIndex);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestResultIdAndStepIndexOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestResultIdAndStepIndexOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Creates a new Test Result for a Test Case.  Once created, a new Test Result can be seen on the \&quot;Execution\&quot; tab of the specified Test Case. This Test Result is not linked with any Test Run. The fields &#x60;&#x60;&#x60;actualStartDate&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;status&#x60;&#x60;&#x60; will be set to default values if not defined.  Deprecation notice - The fields &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; are deprecated. Please use their new equivalents:  &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;executedBy&#x60;&#x60;&#x60;
     *
     * @see #body  (optional)
     * return Object
     */
    public static class CreateTestResultOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testresult";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateTestResultOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType(ContentType.JSON);
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testresult
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testresult
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testResult (TestResult)  (optional)
         * @return operation
         */
        public CreateTestResultOper body(TestResult testResult) {
            reqSpec.setBody(testResult);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateTestResultOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateTestResultOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve the Test Result Attachments matching the given id.
     *
     * @see #testResultIdPath The id of the Test Result. (required)
     * return List&lt;Attachment&gt;
     */
    public static class GetAttachmentsByTestResultIdOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testresult/{testResultId}/attachments";
        public static final String TEST_RESULT_ID_PATH = "testResultId";
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAttachmentsByTestResultIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testresult/{testResultId}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testresult/{testResultId}/attachments
         *
         * @param handler handler
         * @return List&lt;Attachment&gt;
         */
        public List<Attachment> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Attachment>>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testResultId (Integer) The id of the Test Result. (required)
         * @return operation
         */
        public GetAttachmentsByTestResultIdOper testResultIdPath(Object testResultId) {
            reqSpec.addPathParam(TEST_RESULT_ID_PATH, testResultId);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAttachmentsByTestResultIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAttachmentsByTestResultIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve the Test Result Step Attachments matching the given testResultId and stepIndex.
     *
     * @see #testResultIdPath The id of the Test Result. (required)
     * @see #stepIndexPath The index of the Test Result step. (required)
     * return List&lt;Attachment&gt;
     */
    public static class GetTestresultTestResultIdStepStepIndexAttachmentsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testresult/{testResultId}/step/{stepIndex}/attachments";
        public static final String TEST_RESULT_ID_PATH = "testResultId";
        public static final String STEP_INDEX_PATH = "stepIndex";
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTestresultTestResultIdStepStepIndexAttachmentsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testresult/{testResultId}/step/{stepIndex}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testresult/{testResultId}/step/{stepIndex}/attachments
         *
         * @param handler handler
         * @return List&lt;Attachment&gt;
         */
        public List<Attachment> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Attachment>>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testResultId (Integer) The id of the Test Result. (required)
         * @return operation
         */
        public GetTestresultTestResultIdStepStepIndexAttachmentsOper testResultIdPath(Object testResultId) {
            reqSpec.addPathParam(TEST_RESULT_ID_PATH, testResultId);
            return this;
        }

        /**
         * @param stepIndex (Integer) The index of the Test Result step. (required)
         * @return operation
         */
        public GetTestresultTestResultIdStepStepIndexAttachmentsOper stepIndexPath(Object stepIndex) {
            reqSpec.addPathParam(STEP_INDEX_PATH, stepIndex);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTestresultTestResultIdStepStepIndexAttachmentsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTestresultTestResultIdStepStepIndexAttachmentsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
