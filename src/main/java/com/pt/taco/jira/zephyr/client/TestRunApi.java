/*
 * Zephyr Scale Server API (v1)
 * ## DISCLAIMER  We strongly discourage and do not endorse using private APIs for any purpose. Important points to remember:  1. **Non-Endorsement**: We do not support or endorse private API usage.  2. **API Changes**: Private APIs may change without notice; use them at your own risk.  3. **Data Responsibility**: We are not responsible for issues arising from private API use, such ***as data corruption***.  Please follow our terms of service and official ***public*** APIs for a stable and secure application experience. Unauthorized private API use may lead to instability and ***data corruption***.  ## Accessing the API The Zephyr Scale REST API is ready to use if you have Zephyr Scale installed on your JIRA instance. All API uses the following base URL: ``` http://your-jira-host:port/your-jira-context/rest/atm/1.0/ ``` For instance, you can create test results using the \"testresult\" api: ``` POST http://localhost:2990/jira/rest/atm/1.0/testresult ```  ## Authentication Basics Any authentication that works with JIRA will work with the Zephyr Scale REST API. The prefered authentication methods are OAuth and HTTP Basic. See the [JIRA SERVER REST API](https://developer.atlassian.com/server/jira/platform/rest-apis) docs for details. ## Using Status and Environment Fields Some entities, such as the Test Results, may have status and environment fields. The values of these fields are identified by name, not by the localized name. Both fields may have custom values defined by the user on the Zephyr Scale configuration area. All values are **case sensitive**, and they must be set just as displayed on the add-on.  These are the default values, which must be used on the APIs instead of their localized versions: * Test Cases:   * Draft   * Approved   * Deprecated  * Test Runs:   * Not Executed   * In Progress   * Done  * Test Results:   * Not Executed   * In Progress   * Pass   * Fail   * Blocked ## Handling Date Format The API supports the ISO 8601 format for date/time fields. This allows you to pass in the level of detail you need to. When a field is not specified, the earliest possible value is the default. For example, if you do not specify a time of day, we will default to 00:00 (midnight). Similarly, not specifying a timezone defaults the timezone to GMT. The full representation is of the format: ``` yyyy-MM-ddTHH:mm:ss.SSSZ ``` This table illustrates some example valid dates and times:  | Input | Equivalent to | | ------ | ----------- | | 2016 | 2016-01-01T00:00:00.000Z | | 2016-04 | 2016-04-01T00:00:00.000Z | | 2016-04-15 | 2016-04-15T00:00:00.000Z | | 2016-04-15T16 | 2016-04-15T16:00:00.000Z | | 2016-04-15T16:15 | 2016-04-15T16:15:00.000Z | | 2016-04-15T16:15Z | 2016-04-15T16:15:00.000Z (GMT time zone) | | 2016-04-15T16:15-0300 | 2016-04-15T16:15:00.000-0300 (Brazil time zone) |
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pt.taco.jira.zephyr.client;

import com.google.gson.reflect.TypeToken;
import com.pt.taco.jira.zephyr.client.model.Attachment;
import com.pt.taco.jira.zephyr.client.model.TestResult;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.DELETE;
import static io.restassured.http.Method.GET;
import static io.restassured.http.Method.POST;
import static io.restassured.http.Method.PUT;

public class TestRunApi {

    private final Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private TestRunApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static TestRunApi testRun(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new TestRunApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if (reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createAttachmentsByTestRunKey(),
                createTestResultByTestRunKeyAndTestCaseKey(),
                createTestResultsByTestRunKey(),
                createTestRun(),
                deleteTestRunByTestRunKey(),
                findTestRun(),
                getTestResultsByTestRunKey(),
                getTestRunAttachmentsByTestRunKey(),
                getTestRunByTestRunKey(),
                updateTestResultByTestRunKeyAndTestCaseKey()
        );
    }

    public CreateAttachmentsByTestRunKeyOper createAttachmentsByTestRunKey() {
        return new CreateAttachmentsByTestRunKeyOper(createReqSpec());
    }

    public CreateTestResultByTestRunKeyAndTestCaseKeyOper createTestResultByTestRunKeyAndTestCaseKey() {
        return new CreateTestResultByTestRunKeyAndTestCaseKeyOper(createReqSpec());
    }

    public CreateTestResultsByTestRunKeyOper createTestResultsByTestRunKey() {
        return new CreateTestResultsByTestRunKeyOper(createReqSpec());
    }

    public CreateTestRunOper createTestRun() {
        return new CreateTestRunOper(createReqSpec());
    }

    public DeleteTestRunByTestRunKeyOper deleteTestRunByTestRunKey() {
        return new DeleteTestRunByTestRunKeyOper(createReqSpec());
    }

    public FindTestRunOper findTestRun() {
        return new FindTestRunOper(createReqSpec());
    }

    public GetTestResultsByTestRunKeyOper getTestResultsByTestRunKey() {
        return new GetTestResultsByTestRunKeyOper(createReqSpec());
    }

    public GetTestRunAttachmentsByTestRunKeyOper getTestRunAttachmentsByTestRunKey() {
        return new GetTestRunAttachmentsByTestRunKeyOper(createReqSpec());
    }

    public GetTestRunByTestRunKeyOper getTestRunByTestRunKey() {
        return new GetTestRunByTestRunKeyOper(createReqSpec());
    }

    public UpdateTestResultByTestRunKeyAndTestCaseKeyOper updateTestResultByTestRunKeyAndTestCaseKey() {
        return new UpdateTestResultByTestRunKeyAndTestCaseKeyOper(createReqSpec());
    }

    /**
     * Customize request specification
     *
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public TestRunApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create a new attachment on the specified Test Run.
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     * return Object
     */
    public static class CreateAttachmentsByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testrun/{testRunKey}/attachments";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public CreateAttachmentsByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testrun/{testRunKey}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testrun/{testRunKey}/attachments
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public CreateAttachmentsByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAttachmentsByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Creates a new Test Result on the specified Test Run, looking for an item that matches the &#x60;&#x60;&#x60;testCaseKey&#x60;&#x60;&#x60; and the query string filter parameters. If more than one item is found using the specified parameters, only the first one of them will have the new Test Result created. Once created, the new Test Result can be seen inside the specified Test Run, looking for a Test Case that matches the request parameters. The fields &#x60;&#x60;&#x60;actualStartDate&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;status&#x60;&#x60;&#x60; will be set to default values if not defined.  Deprecation notice - The fields &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; are deprecated. Please use their new equivalents:  &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;executedBy&#x60;&#x60;&#x60;
     *
     * @see #testCaseKeyPath The key of the Test Case (required)
     * @see #testRunKeyPath The key of the Test Run. (required)
     * @see #environmentQuery The environment to be optionally matched by an item on the Test Run. (required)
     * @see #userKeyQuery The user key to be optionally matched by an item on the Test Run. (required)
     * @see #body  (optional)
     * return Object
     */
    public static class CreateTestResultByTestRunKeyAndTestCaseKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testrun/{testRunKey}/testcase/{testCaseKey}/testresult";
        public static final String TEST_CASE_KEY_PATH = "testCaseKey";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        public static final String ENVIRONMENT_QUERY = "environment";
        public static final String USER_KEY_QUERY = "userKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public CreateTestResultByTestRunKeyAndTestCaseKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType(ContentType.JSON);
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testrun/{testRunKey}/testcase/{testCaseKey}/testresult
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testrun/{testRunKey}/testcase/{testCaseKey}/testresult
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param body (String)  (optional)
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper body(String body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param testCaseKey (String) The key of the Test Case (required)
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper testCaseKeyPath(Object testCaseKey) {
            reqSpec.addPathParam(TEST_CASE_KEY_PATH, testCaseKey);
            return this;
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * @param environment (String) The environment to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper environmentQuery(Object... environment) {
            reqSpec.addQueryParam(ENVIRONMENT_QUERY, environment);
            return this;
        }

        /**
         * @param userKey (String) The user key to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper userKeyQuery(Object... userKey) {
            reqSpec.addQueryParam(USER_KEY_QUERY, userKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateTestResultByTestRunKeyAndTestCaseKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Create new Test Results on the specified Test Run, looking for items that match the &#x60;&#x60;&#x60;testCaseKey&#x60;&#x60;&#x60; for each body item. Once created, the new Test Results can be seen inside the specified Test Run, looking for Test Cases that match the request parameters. The fields &#x60;&#x60;&#x60;actualStartDate&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;status&#x60;&#x60;&#x60; will be set to default values if not defined.  Deprecation notice - The fields &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; are deprecated. Please use their new equivalents:  &#x60;&#x60;&#x60;executionDate&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;actualEndDate&#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;userKey&#x60;&#x60;&#x60; is now represented by &#x60;&#x60;&#x60;executedBy&#x60;&#x60;&#x60;
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     * @see #environmentQuery The environment to be optionally matched by an item on the Test Run. (required)
     * @see #userKeyQuery The user key to be optionally matched by an item on the Test Run. (required)
     * @see #body  (optional)
     * return Object
     */
    public static class CreateTestResultsByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testrun/{testRunKey}/testresults";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        public static final String ENVIRONMENT_QUERY = "environment";
        public static final String USER_KEY_QUERY = "userKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public CreateTestResultsByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType(ContentType.JSON);
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testrun/{testRunKey}/testresults
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testrun/{testRunKey}/testresults
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param body (String)  (optional)
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper body(String body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * @param environment (String) The environment to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper environmentQuery(Object... environment) {
            reqSpec.addQueryParam(ENVIRONMENT_QUERY, environment);
            return this;
        }

        /**
         * @param userKey (String) The user key to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper userKeyQuery(Object... userKey) {
            reqSpec.addQueryParam(USER_KEY_QUERY, userKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateTestResultsByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Creates a new Test Run.  The fields &#x60;&#x60;&#x60;plannedStartDate&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;plannedEndDate&#x60;&#x60;&#x60; will be set to default values if not defined. The field &#x60;&#x60;&#x60;status&#x60;&#x60;&#x60; will be automatically inferred based on the status of Test Run Items (field &#x60;&#x60;&#x60;items&#x60;&#x60;&#x60;). The Test Run can be linked to a Test Plan, by setting a valid value on field testPlanKey. Also, it can be linked to an issue, by setting a valid value on field issueKey. All Test Result fields are allowed for Test Run Items (field &#x60;&#x60;&#x60;items&#x60;&#x60;&#x60;).
     *
     * @see #body  (optional)
     * return Object
     */
    public static class CreateTestRunOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/testrun";

        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public CreateTestRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType(ContentType.JSON);
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /testrun
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /testrun
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param body (String)  (optional)
         * @return operation
         */
        public CreateTestRunOper body(String body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateTestRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateTestRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Delete the Test Run matching the given key.
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     */
    public static class DeleteTestRunByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/testrun/{testRunKey}";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteTestRunByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /testrun/{testRunKey}
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public DeleteTestRunByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteTestRunByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteTestRunByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve the Test Runs that matches the query passed as parameter.
     *
     * @see #fieldsQuery The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored. (optional)
     * @see #queryQuery A query to filter Test Runs. The query syntax is similar to the JIRA JQL.  * Available fields: &#x60;&#x60;&#x60;projectKey&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;folder&#x60;&#x60;&#x60; * Available operators: &#x60;&#x60;&#x60;&#x3D;&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;IN&#x60;&#x60;&#x60; * Available logical operators: &#x60;&#x60;&#x60;AND&#x60;&#x60;&#x60;  The query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.  Usage example: * projectKey &#x3D; \&quot;JQA\&quot; * projectKey IN (\&quot;JQA\&quot;, \&quot;DEF\&quot;) * projectKey &#x3D; \&quot;JQA\&quot; AND folder &#x3D; \&quot;/Orbiter\&quot; * projectKey IN (\&quot;JQA\&quot;, \&quot;DEF\&quot;) AND folder &#x3D; \&quot;/Orbiter/Propellant\&quot; * folder &#x3D; \&quot;/Orbiter\&quot;  (optional)
     * @see #startAtQuery An offset to use with the query. This can be useful when paginating results. (optional)
     * @see #maxResultsQuery The max result count, limiting the query results. If not provided, the default value of 200 will be used. (optional)
     * return Object
     */
    public static class FindTestRunOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testrun/search";
        public static final String FIELDS_QUERY = "fields";
        public static final String QUERY_QUERY = "query";
        public static final String START_AT_QUERY = "startAt";
        public static final String MAX_RESULTS_QUERY = "maxResults";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public FindTestRunOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testrun/search
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testrun/search
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param fields (String) The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored. (optional)
         * @return operation
         */
        public FindTestRunOper fieldsQuery(Object... fields) {
            reqSpec.addQueryParam(FIELDS_QUERY, fields);
            return this;
        }

        /**
         * @param query (String) A query to filter Test Runs. The query syntax is similar to the JIRA JQL.  * Available fields: &#x60;&#x60;&#x60;projectKey&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;folder&#x60;&#x60;&#x60; * Available operators: &#x60;&#x60;&#x60;&#x3D;&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;IN&#x60;&#x60;&#x60; * Available logical operators: &#x60;&#x60;&#x60;AND&#x60;&#x60;&#x60;  The query syntax is very strict. The use of whitespaces between fields, operators and logical operators is required, as well as the use of double quotes for string values.  Usage example: * projectKey &#x3D; \&quot;JQA\&quot; * projectKey IN (\&quot;JQA\&quot;, \&quot;DEF\&quot;) * projectKey &#x3D; \&quot;JQA\&quot; AND folder &#x3D; \&quot;/Orbiter\&quot; * projectKey IN (\&quot;JQA\&quot;, \&quot;DEF\&quot;) AND folder &#x3D; \&quot;/Orbiter/Propellant\&quot; * folder &#x3D; \&quot;/Orbiter\&quot;  (optional)
         * @return operation
         */
        public FindTestRunOper queryQuery(Object... query) {
            reqSpec.addQueryParam(QUERY_QUERY, query);
            return this;
        }

        /**
         * @param startAt (Integer) An offset to use with the query. This can be useful when paginating results. (optional)
         * @return operation
         */
        public FindTestRunOper startAtQuery(Object... startAt) {
            reqSpec.addQueryParam(START_AT_QUERY, startAt);
            return this;
        }

        /**
         * @param maxResults (Integer) The max result count, limiting the query results. If not provided, the default value of 200 will be used. (optional)
         * @return operation
         */
        public FindTestRunOper maxResultsQuery(Object... maxResults) {
            reqSpec.addQueryParam(MAX_RESULTS_QUERY, maxResults);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public FindTestRunOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public FindTestRunOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve All Test Results linked to a Test Run.
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     * return TestResult
     */
    public static class GetTestResultsByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testrun/{testRunKey}/testresults";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public GetTestResultsByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testrun/{testRunKey}/testresults
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testrun/{testRunKey}/testresults
         *
         * @param handler handler
         * @return TestResult
         */
        public TestResult executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<TestResult>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public GetTestResultsByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTestResultsByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTestResultsByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve the Test Run Attachments matching the given key.
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     * return List&lt;Attachment&gt;
     */
    public static class GetTestRunAttachmentsByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testrun/{testRunKey}/attachments";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public GetTestRunAttachmentsByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testrun/{testRunKey}/attachments
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testrun/{testRunKey}/attachments
         *
         * @param handler handler
         * @return List&lt;Attachment&gt;
         */
        public List<Attachment> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Attachment>>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public GetTestRunAttachmentsByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTestRunAttachmentsByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTestRunAttachmentsByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Retrieve the Test Run matching the given key.
     *
     * @see #testRunKeyPath The key of the Test Run. (required)
     * @see #fieldsQuery The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored. (optional)
     * return Object
     */
    public static class GetTestRunByTestRunKeyOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/testrun/{testRunKey}";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        public static final String FIELDS_QUERY = "fields";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public GetTestRunByTestRunKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /testrun/{testRunKey}
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /testrun/{testRunKey}
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public GetTestRunByTestRunKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * @param fields (String) The fields of the Test Run to be included on the response. If not set, all fields will be returned. Inexistent fields will be ignored. (optional)
         * @return operation
         */
        public GetTestRunByTestRunKeyOper fieldsQuery(Object... fields) {
            reqSpec.addQueryParam(FIELDS_QUERY, fields);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTestRunByTestRunKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTestRunByTestRunKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }

    /**
     * Updates the last Test Result on the specified Test Run, looking for an item that matches the testCaseKey and the query string filter parameters. Only defined fields will be updated. If more than one item is found using the specified parameters, only the first one of them will have the Test Result updated. The updated data can be seen inside the specified Test Run, looking for the last Test Results of the Test Case that matches the request parameters.
     *
     * @see #testCaseKeyPath The key of the Test Case (required)
     * @see #testRunKeyPath The key of the Test Run. (required)
     * @see #environmentQuery The environment to be optionally matched by an item on the Test Run. (required)
     * @see #userKeyQuery The user key to be optionally matched by an item on the Test Run. (required)
     * @see #body  (optional)
     * return Object
     */
    public static class UpdateTestResultByTestRunKeyAndTestCaseKeyOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/testrun/{testRunKey}/testcase/{testCaseKey}/testresult";
        public static final String TEST_CASE_KEY_PATH = "testCaseKey";
        public static final String TEST_RUN_KEY_PATH = "testRunKey";
        public static final String ENVIRONMENT_QUERY = "environment";
        public static final String USER_KEY_QUERY = "userKey";
        private final RequestSpecBuilder reqSpec;
        private final ResponseSpecBuilder respSpec;

        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType(ContentType.JSON);
            reqSpec.setAccept(ContentType.JSON);
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /testrun/{testRunKey}/testcase/{testCaseKey}/testresult
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /testrun/{testRunKey}/testcase/{testCaseKey}/testresult
         *
         * @param handler handler
         * @return Object
         */
        public Object executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Object>() {
            }.getType();
            return execute(handler).as(type);
        }

        /**
         * @param body (String)  (optional)
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper body(String body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param testCaseKey (String) The key of the Test Case (required)
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper testCaseKeyPath(Object testCaseKey) {
            reqSpec.addPathParam(TEST_CASE_KEY_PATH, testCaseKey);
            return this;
        }

        /**
         * @param testRunKey (String) The key of the Test Run. (required)
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper testRunKeyPath(Object testRunKey) {
            reqSpec.addPathParam(TEST_RUN_KEY_PATH, testRunKey);
            return this;
        }

        /**
         * @param environment (String) The environment to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper environmentQuery(Object... environment) {
            reqSpec.addQueryParam(ENVIRONMENT_QUERY, environment);
            return this;
        }

        /**
         * @param userKey (String) The user key to be optionally matched by an item on the Test Run. (required)
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper userKeyQuery(Object... userKey) {
            reqSpec.addQueryParam(USER_KEY_QUERY, userKey);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateTestResultByTestRunKeyAndTestCaseKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
